(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{443:function(s,n,a){"use strict";a.r(n);var t=a(4),e=Object(t.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_2-3-动态规划算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-动态规划算法"}},[s._v("#")]),s._v(" 2.3 动态规划算法")]),s._v(" "),n("h2",{attrs:{id:"_2-3-1-什么是动态规划算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-什么是动态规划算法"}},[s._v("#")]),s._v(" 2.3.1 什么是动态规划算法")]),s._v(" "),n("p",[s._v("动态规划算法是一种常用的问题解决方法。"),n("strong",[s._v("它通过将问题分解为更小的子问题，并保存子问题的解，以避免重复计算")]),s._v("。与分治法不同的是，动态规划算法的子问题往往是不相同的且有关联的。")]),s._v(" "),n("p",[n("strong",[s._v("动态规划的核心在于：")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("现在的问题由过去求解，分析当前解是如何从过去的解中得到的，即从问题中得到递推式。")])]),s._v(" "),n("li",[n("p",[s._v("使用一个表来记录所有已解决的子问题的答案，不管他以后是否被用到，只要他被计算过，就将其结果记录表中。")])]),s._v(" "),n("li",[n("p",[s._v("明确dp[i][j]所指的含义")])])]),s._v(" "),n("p",[s._v("这样描述可能有点抽象，下面通过几道例题进行加深你的理解。")]),s._v(" "),n("h2",{attrs:{id:"_2-3-2-动态规划的适用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-动态规划的适用场景"}},[s._v("#")]),s._v(" 2.3.2 动态规划的适用场景")]),s._v(" "),n("p",[s._v("动态规划适用于：")]),s._v(" "),n("ul",[n("li",[s._v("问题可以被分解为更小的子问题进行求解的场景")])]),s._v(" "),n("p",[s._v("一些常见的应用场景包括：")]),s._v(" "),n("ul",[n("li",[n("p",[n("strong",[s._v("背包问题：")]),s._v(" 给定一组物品和一个背包，每个物品有自己的重量和价值，要求选择一些物品放入背包，使得背包中物品的总价值最大。动态规划算法可以帮助我们解决这个问题，通过构建一个价值表格，在每个状态下选择最优的决策。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("最长公共子序列问题：")]),s._v(" 给定两个字符串，找到它们之间最长的共同子序列的长度。通过构建一个二维表格，依次计算每个子问题的最长公共子序列长度，并保存在表格中。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("最优路径规划：")]),s._v(" 在一个网格中，从起点到终点，要求找到路径的总和最小或者最大的路径。动态规划算法可以通过构建一个二维表格，依次计算每个子问题的解，并保存在表格中，最终得到最优路径。")])])]),s._v(" "),n("h4",{attrs:{id:"_2-3-3-动态规划模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-动态规划模板"}},[s._v("#")]),s._v(" 2.3.3 动态规划模板")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 对于递推式f(n) = f(n-1) + f(n-2)\nvoid func(int[] nums) {\n\tint[] dp = new int[nums.length];\n\tdp[0] = 0; // 边界条件\n\tdp[1] = 1; // 边界条件\n\tfor (int i=3; i< dp.length; i++) {\n\t\tdp[i] = dp[i-1] + dp[i-2];\n\t}\n\treturn dp[nums.length-1];\n}\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h4",{attrs:{id:"_2-3-4-动态规划详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-4-动态规划详解"}},[s._v("#")]),s._v(" 2.3.4 动态规划详解")]),s._v(" "),n("h5",{attrs:{id:"_2-3-4-1-leetcode-198-打家劫舍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-4-1-leetcode-198-打家劫舍"}},[s._v("#")]),s._v(" 2.3.4.1 leetcode 198. 打家劫舍")]),s._v(" "),n("p",[s._v("你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。")]),s._v(" "),n("p",[s._v("给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("示例 1：\n输入：[100,2,3,100]\n输出：200\n解释：偷窃 1 号房屋 (金额 = 100) ，然后偷窃 4 号房屋 (金额 = 100)。\n     偷窃到的最高金额 = 100 + 100 = 200 。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("分析：")]),s._v(" "),n("ul",[n("li",[s._v("递推式 ： "),n("code",[s._v("dp[i] = Math.max(dp[i-2]+nums[i], dp[i-1])")]),s._v("，即相邻的金币比较大，则不偷取当前的房屋，若相隔一间加上当前房屋的数额比相邻的大，则偷取当前房屋，并计算能偷取的最大值。")]),s._v(" "),n("li",[n("strong",[s._v("dp[i]为当前能偷盗金币的最大值")]),s._v("。")])]),s._v(" "),n("h5",{attrs:{id:"_2-3-4-1-背包问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-4-1-背包问题"}},[s._v("#")]),s._v(" 2.3.4.1 背包问题")]),s._v(" "),n("h5",{attrs:{id:"_2-3-4-2-最长递增子序列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-4-2-最长递增子序列"}},[s._v("#")]),s._v(" 2.3.4.2 最长递增子序列")]),s._v(" "),n("p",[s._v("给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。")]),s._v(" "),n("p",[s._v("子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("示例 1：\n\n输入：nums = [10,9,2,5,3,7,101,18]\n输出：4\n解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("分析：")]),s._v(" "),n("p",[s._v("以nums[i]为最长递增子序列的结尾，dp[i]为以nums[i]为最长递增子序列的结尾的序列最大长度。\n当遍历到nums[i]时，其最长递增子序列可以由上一个小于他的数的最长递增子序列的最大值得到，则得到递推式dp[i] = preMax + 1;\n如何得到上一个小于他的数的最长递增子序列的最大值呢，则需要再遍历一遍dp[]因此还需要一个for循环来遍历dp[]。\n代码如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 动态规划解法\nclass Solution {\n    public int lengthOfLIS(int[] nums) {\n        int n  = nums.length;\n        if (n == 1) return 1;\n        int[] dp  = new int[n];\n        dp[0] = 1;\n        int res = 1;\n        for (int i = 1;  i<n ; i++) {\n            int tempMax = 0;\n            for (int j = 0; j < i; j++) {\n                if (nums[j]< nums[i] && dp[j] > tempMax) {\n                    tempMax = dp[j];\n                }\n            }\n            dp[i] = tempMax + 1;\n            if (dp[i] > res) res = dp[i];\n        }\n        return res;\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);