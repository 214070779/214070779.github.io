(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{380:function(s,n,a){"use strict";a.r(n);var e=a(4),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"一、反射"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、反射"}},[s._v("#")]),s._v(" 一、反射")]),s._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),n("p",[s._v("反射，一般表现在字符串和Class转换，字符串和内部方法转换，字符串和属性的转换（取值和赋值）。")])]),s._v(" "),n("h2",{attrs:{id:"objective-c中的反射"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#objective-c中的反射"}},[s._v("#")]),s._v(" Objective-C中的反射")]),s._v(" "),n("p",[s._v("OC的反射是基于其Runtime实现的。")]),s._v(" "),n("p",[s._v("以执行某个函数为例，我们知道在OC中执行[pyPerson doSomething]函数，实质上是发送了一个消息给Runtime,然后Runtime再根据这个Class的字符串名和这个函数的字符串名，去匹配真正相应的方法的地址，然后再执行的。所以中间我们可以利用字符串去动态的检测，甚至动态的修改（之前说到的Method Swizzling）。")]),s._v(" "),n("p",[s._v("理解：反射机制是指方法名、类名、属性名等可以和字符串相互转化（反射），而这些转化是发生在运行时的，所以我们可以用这个机制来动态的获取类、方法或属性，从而动态的创建类对象、调用方法、或给属性赋值、判断类型等。")]),s._v(" "),n("h2",{attrs:{id:"获取class对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取class对象"}},[s._v("#")]),s._v(" 获取Class对象")]),s._v(" "),n("p",[s._v("Class对象其实本质上就是一个结构体，这个结构体中的成员变量还是自己，这种设计方式非常像链表的数据结构。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("typedef struct objc_class *Class;\nstruct objc_class {\n    Class isa  OBJC_ISA_AVAILABILITY;                                  \n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("直接用一个实例对象或类对象，直接调用Class方法，都可以获取Class对象。我们调用下面三个方法，都可以获得Class对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 在实例方法中通过self调用class实例方法获取类对象\n[self class]\n// 通过ViewController类直接调用class类方法获取类对象\n[ViewController class]\n// 在类方法中使用类对象调用class方法获取类对象\n+ (Class)classMethod {\n    return [self class];\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("我们发现调用这三个方法，获取到的类对象是同一个类对象，内存地址也是一样的：")]),s._v(" "),n("h2",{attrs:{id:"反射方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射方法"}},[s._v("#")]),s._v(" 反射方法")]),s._v(" "),n("p",[s._v("系统Foundation框架为我们提供了一些方法反射的API，我们可以通过这些API执行将字符串转为SEL等操作。由于OC语言的动态性，这些操作都是发生在运行时的")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// SEL和字符串转换\nFOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);\nFOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);\n// Class和字符串转换\nFOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);\nFOUNDATION_EXPORT Class __nullable NSClassFromString(NSString *aClassName);\n// Protocol和字符串转换\nFOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) NS_AVAILABLE(10_5, 2_0);\nFOUNDATION_EXPORT Protocol * __nullable NSProtocolFromString(NSString *namestr) NS_AVAILABLE(10_5, 2_0);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("通过这些方法，我们可以在运行时选择创建那个实例，并动态选择调用哪个方法。这些操作甚至可以由服务器传回来的参数来控制，我们可以将服务器传回来的类名和方法名，实例为我们的对象。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 假设从服务器获取JSON串，通过这个JSON串获取需要创建的类为FBViewController，\n// 并且调用这个类的getList方法。\nClass class = NSClassFromString(@"FBViewController");\nFBViewController *vc = [[class alloc] init];\nSEL selector = NSSelectorFromString(@"getList");\n[vc performSelector:selector];\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"_1-字符串和class转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-字符串和class转换"}},[s._v("#")]),s._v(" 1.字符串和Class转换")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('Class __nullable NSClassFromString(NSString *aClassName);\n// 当前对象是否这个类或其子类的实例\n- (BOOL)isKindOfClass:(Class)aClass;\n// 当前对象是否是这个类的实例\n- (BOOL)isMemberOfClass:(Class)aClass; \n\n\nexample:\n\n//通过这样的方式获取class\nClass Person = NSClassFromString(@"FBPerson");  \nFBPerson *person= [[Person alloc] init]; \n//判断是否为其子类的对象\nFBPerson *person= [[FBPerson alloc] init]; \nif([person isKindOfClass:[FBStudent class]])\n{ \n   NSLog(@"person是FBStudent类型或其子类");\n}else{\n   NSLog(@"person不是FBStudent类型或其子类");\n } \n//判断是否是该class的对象\nif([person isMemberOfClass:[FBStudent class]]){\n  NSLog(@"person是FBStudent类型"); \n}else{ \n  NSLog(@"person不是FBStudent类型");\n}  \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("h3",{attrs:{id:"_2-字符串和内部方法转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-字符串和内部方法转换"}},[s._v("#")]),s._v(" 2.字符串和内部方法转换")]),s._v(" "),n("p",[s._v("在NSObject类中为我们提供了一些基础方法，用来做一些判断操作，这些方法都是发生在运行时动态判断的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('- (BOOL)respondsToSelector:(SEL)aSelector  //判断类型或对象有没有某个方法\n+ (BOOL)instancesRespondToSelector:(SEL)aSelector; //判断静态方法\n- (id)performSelector:(SEL)aSelector  //动态调用对象的方法\n- (BOOL)conformsToProtocol:(Protocol *)aProtocol; //判断对象是否实现某个Protocol协议\n\n\nexample:\n\n//动态生成方法选择器\nSEL sel =  NSSelectorFromString(@"setAge:");   \n\n//检测是否存在某方法\nFBStudent *stu = [[FBStudent alloc]init];  \nif([stu respondsToSelector:@selector(setAge)]){  \n    NSLog(@"stu 有setAge这个方法");  \n}else{  \n    NSLog(@"没有");  \n}  \n\n\n//动态动用方法\nFBStudent *stu = [[FBStudent alloc]initAge:1];  \nint age = [stu performSelector:@selector(age)];  \nNSLog(@"%i",age);//输出1  \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("h3",{attrs:{id:"_3-字符串和属性的转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-字符串和属性的转换"}},[s._v("#")]),s._v(" 3.字符串和属性的转换")]),s._v(" "),n("p",[s._v("OC中属性的反射通过KVC（Key-Value Coding）机制实现，KVC是一种间接访问对象属性的机制,不直接调用getter 和 setter方法，而使用valueForKey 来替代getter 方法，setValue:forKey来代替setter方法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('Example：\n\nFBBattery *persion = [[FBBattery alloc] init];\n\n//不使用KVC\npersion.name = @"yu" ;\n\n//使用KVC的写法\n[persion  setValue:@"yu" forKey:@"name"];\n//上面是利用KVC访问类里的某个属性，下面利用KVC直接访问类里的类里的某个属性\n\n//不使用KVC\nFBPersion *persion = [[FBPersion alloc] init];\nFBPhone *phone = persion.phone;\nFBBattery *battery = phone.battery;\n\n//使用KVC\nFBBattery *battery = [persion valueForKeyPath: @"phone.battery" ]; \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h2",{attrs:{id:"反射机制使用技巧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射机制使用技巧"}},[s._v("#")]),s._v(" 反射机制使用技巧")]),s._v(" "),n("p",[s._v("首先需要和后台商量好返回的数据结构，以及数据格式、类型等，返回后我们按照和后台约定的格式，根据后台返回的信息，直接进行反射和调用即可。")]),s._v(" "),n("p",[s._v("假设约定格式如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('@{\n     // 类名\n     @"className" : @"UserViewController", \n     // 数据参数\n     @"propertys" : @{ @"name": @"lishan", \n                       @"age": @17 },\n     // 调用方法名\n     @"method" : @"refreshUserInfor"\n };\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("定义一个UserViewController类，这个类用于测试，在实际使用中可能会有多个这样的控制器类。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#import <UIKit/UIKit.h>\n\n// 由于使用的KVC赋值，如果不想把这两个属性暴露出来，把这两个属性写在.m文件也可以\n@interface UserViewController : UIViewController\n@property (nonatomic,copy) NSString *name;/*!< 用户名 */\n@property (nonatomic,copy) NSNumber *age;/*!< 用户年龄 */\n/** 使用反射机制反射为SEL后，调用的方法 */\n- (void)refreshUserInfo;\n\n@end\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("通过反射机制简单实现了控制器跳转的方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 简单封装的页面跳转方法，只是做演示，代码都是没问题的，使用时可以根据业务需求进行修改。\n- (void)remoteNotificationDictionary:(NSDictionary *)dict {\n    // 根据字典字段反射出我们想要的类，并初始化控制器\n    Class class = NSClassFromString(dict[@"className"]);\n    UIViewController *vc = [[class alloc] init];\n    // 获取参数列表，使用枚举的方式，对控制器进行KVC赋值\n    NSDictionary *parameter = dict[@"propertys"];\n    [parameter enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) {\n        if ([[parameter allKeys] containsObject:key]) {\n    //对于setValue forKey，需要小心的是，假如类型匹配错误的情况下，编译会通过，但运行会报错\n            [vc setValue:obj forKey:key];\n        }\n    }];\n    [self.navigationController pushViewController:vc animated:YES];\n    // 从字典中获取方法名，并调用对应的方法\n    SEL selector = NSSelectorFromString(dict[@"method"]);\n    [vc performSelector:selector];\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);