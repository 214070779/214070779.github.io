(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{409:function(e,l,n){"use strict";n.r(l);var s=n(4),a=Object(s.a)({},(function(){var e=this,l=e._self._c;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h2",{attrs:{id:"简介"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),l("p",[e._v("MVC，MVP和MVVM都是常见的软件架构设计模式（Architectural Pattern），它通过分离关注点来改进代码的组织方式。不同于设计模式（Design Pattern），只是为了解决一类问题而总结出的抽象方法，一种架构模式往往使用了多种设计模式")]),e._v(" "),l("p",[e._v("它们目标都是解耦，解耦好处一个是关注点分离，提升代码可维护和可读性，并且提升代码复用性。")]),e._v(" "),l("p",[e._v("它们都将应用抽象分离成视图、逻辑、数据3层。")]),e._v(" "),l("h2",{attrs:{id:"mvc"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[e._v("#")]),e._v(" MVC")]),e._v(" "),l("ul",[l("li",[e._v("M: Model 数据层， 负责应用的业务逻辑。它管理着应用的状态。这还包括读取和写入数据，持久化应用程序状态，甚至可能包括与数据管理相关的任务，例如网络和数据验证")]),e._v(" "),l("li",[e._v("V: View 视图层，这部分有两个重要的任务：向用户展示数据和处理用户和应用的交互")]),e._v(" "),l("li",[e._v("C: Controller控制器， view 层和 model 层经由一个或多个 controller 绑定在一起。")])]),e._v(" "),l("h3",{attrs:{id:"用户的交互逻辑"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#用户的交互逻辑"}},[e._v("#")]),e._v(" 用户的交互逻辑")]),e._v(" "),l("p",[e._v("用户点击 View(视图) --\x3e 视图响应事件 --\x3e通过代理传递事件到Controller--\x3e发起网络请求更新Model---\x3eModel处理完数据--\x3e代理或通知给Controller--\x3e改变视图样式--\x3e完成\n可以看到Controller强引用View与Model，而View与Model是分离的，所以就可以保证Model和View的可测试性和复用性，但是Controller不行，因为Controller是Model和View的中介，所以不能复用，或者说很难复用。")]),e._v(" "),l("p",[e._v("用户场景：")]),e._v(" "),l("p",[e._v("用户交互输入了某些内容")]),e._v(" "),l("p",[e._v("Controller将用户输入转化为Model所需要进行的更改")]),e._v(" "),l("p",[e._v("Model中的更改结束之后，Controller通知View进行更新以表现出当前Model的状态")]),e._v(" "),l("p",[e._v("iOS开发实际使用的MVC架构")]),e._v(" "),l("p",[l("img",{attrs:{src:"https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-27-at-09.42.02.54ihvxf6ayc0.webp",alt:"Screenshot-2023-08-27-at-09"}})]),e._v(" "),l("p",[e._v("在我们实际开发中使用的MVC模式可以看到，View与Controller耦合在一起了。这是由于每一个界面的创建都需要一个Controller，而每一个Controller里面必然会带一个View，这就导致了C和V的耦合。这种结构确实可以提高开发效率，但是一旦界面复杂就会造成Controller变得非常臃肿和难以维护。")]),e._v(" "),l("p",[e._v("MVC代码示例")]),e._v(" "),l("p",[e._v("我们要实现一个简单的列表页面，每行cell都一个按钮，点击按钮前面数字➕1操作。")]),e._v(" "),l("p",[e._v("核心代码：")]),e._v(" "),l("p",[e._v(":::")]),e._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v('// Controller\n- (UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n\n    __weak typeof(self) wealSelf = self;\n    MVCTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"Cell_identifer"];\n    if(cell == nil){\n        cell = [[MVCTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"Cell_identifer"];\n    }\n    DemoModel *model = self.dataArray[indexPath.row];\n    [cell loadDataWithModel:model];\n    cell.clickBtn = ^{\n        NSLog(@"id===%ld",model.num);\n        [wealSelf changeNumWithModel:model];\n    };\n    cell.selectionStyle = UITableViewCellSelectionStyleNone;\n    return cell;\n}\n/*\n* 用户点击事件通过Block传递过来后，在Controller层处理更新Mdoel以及更新视图的逻辑\n*/\n- (void)changeNumWithModel:(DemoModel*)model{\n\n    model.num++;\n    NSIndexPath *path = [NSIndexPath indexPathForRow:model.Id inSection:0];\n    [self.mainTabelView reloadRowsAtIndexPaths:@[path] withRowAnimation:UITableViewRowAnimationLeft];\n}\n')])]),e._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[e._v("1")]),l("br"),l("span",{staticClass:"line-number"},[e._v("2")]),l("br"),l("span",{staticClass:"line-number"},[e._v("3")]),l("br"),l("span",{staticClass:"line-number"},[e._v("4")]),l("br"),l("span",{staticClass:"line-number"},[e._v("5")]),l("br"),l("span",{staticClass:"line-number"},[e._v("6")]),l("br"),l("span",{staticClass:"line-number"},[e._v("7")]),l("br"),l("span",{staticClass:"line-number"},[e._v("8")]),l("br"),l("span",{staticClass:"line-number"},[e._v("9")]),l("br"),l("span",{staticClass:"line-number"},[e._v("10")]),l("br"),l("span",{staticClass:"line-number"},[e._v("11")]),l("br"),l("span",{staticClass:"line-number"},[e._v("12")]),l("br"),l("span",{staticClass:"line-number"},[e._v("13")]),l("br"),l("span",{staticClass:"line-number"},[e._v("14")]),l("br"),l("span",{staticClass:"line-number"},[e._v("15")]),l("br"),l("span",{staticClass:"line-number"},[e._v("16")]),l("br"),l("span",{staticClass:"line-number"},[e._v("17")]),l("br"),l("span",{staticClass:"line-number"},[e._v("18")]),l("br"),l("span",{staticClass:"line-number"},[e._v("19")]),l("br"),l("span",{staticClass:"line-number"},[e._v("20")]),l("br"),l("span",{staticClass:"line-number"},[e._v("21")]),l("br"),l("span",{staticClass:"line-number"},[e._v("22")]),l("br"),l("span",{staticClass:"line-number"},[e._v("23")]),l("br"),l("span",{staticClass:"line-number"},[e._v("24")]),l("br"),l("span",{staticClass:"line-number"},[e._v("25")]),l("br"),l("span",{staticClass:"line-number"},[e._v("26")]),l("br")])]),l("p",[e._v(":::")]),e._v(" "),l("p",[e._v("可以看到用户点击事件通过Block传递过来后，在Controller层处理更新Mdoel以及更新视图的逻辑")]),e._v(" "),l("h2",{attrs:{id:"mvp设计模式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#mvp设计模式"}},[e._v("#")]),e._v(" MVP设计模式")]),e._v(" "),l("p",[l("img",{attrs:{src:"https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-27-at-09.44.09.58em016ao000.webp",alt:"Screenshot-2023-08-27-at-09"}})]),e._v(" "),l("p",[e._v("MVP")]),e._v(" "),l("p",[e._v("M: Model 数据层 代表一组描述业务逻辑和数据的类。它制定了更改和操作数据的规则")]),e._v(" "),l("p",[e._v("V: View 视图层，负责呈现从数据层传递的数据渲染工作，以及与用户的交互，这里把Controller层也合并到视图层")]),e._v(" "),l("p",[e._v("P: Presenter层，presenter 从 View 获取输入，在 model 的帮助下处理数据，并在处理完成后将结果传递回 view。")]),e._v(" "),l("p",[e._v("可以看到 MVP模式跟原始的MVC模式非常相似，完全实现了View与Model层的分离，而且把业务逻辑放在了Presenter层中，视图需要的所有数据都从Presenter获取，而View与 Presenter通过协议进行事件的传递。")]),e._v(" "),l("p",[e._v("MVP 是 MVC 设计模式的衍生品，该模式专注于改进展示逻辑")]),e._v(" "),l("p",[e._v("用户的交互逻辑")]),e._v(" "),l("p",[e._v("用户点击 View(视图) --\x3e 视图响应事件 --\x3e通过代理传递事件到Presenter--\x3e发起网络请求更新Model--\x3eModel处理完数据--\x3e代理或通知给视图(View或是Controller)--\x3e改变视图样式--\x3e完成")]),e._v(" "),l("p",[e._v("业务场景：")]),e._v(" "),l("p",[e._v("用户交互输入了某些内容")]),e._v(" "),l("p",[e._v("View将用户输入转化为发送给Presenter")]),e._v(" "),l("p",[e._v("Presenter控制Model接收需要改变的点")]),e._v(" "),l("p",[e._v("Model将更新之后的值返回给Presenter")]),e._v(" "),l("p",[e._v("Presenter将更新之后的模型返回给View")]),e._v(" "),l("div",{staticClass:"custom-block tip"},[l("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("//DemoProtocal\nimport <Foundation/Foundation.h>\n\n@protocol DemoProtocal <NSObject>\n@optional\n//用户点击按钮 触发事件： UI改变传值到model数据改变  UI --- > Model 点击cell 按钮\n-(void)didClickCellAddBtnWithIndexPathRow:(NSInteger)index;\n//model数据改变传值到UI界面刷新 Model --- > UI\n-(void)reloadUI;\n@end\n")])]),e._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[e._v("1")]),l("br"),l("span",{staticClass:"line-number"},[e._v("2")]),l("br"),l("span",{staticClass:"line-number"},[e._v("3")]),l("br"),l("span",{staticClass:"line-number"},[e._v("4")]),l("br"),l("span",{staticClass:"line-number"},[e._v("5")]),l("br"),l("span",{staticClass:"line-number"},[e._v("6")]),l("br"),l("span",{staticClass:"line-number"},[e._v("7")]),l("br"),l("span",{staticClass:"line-number"},[e._v("8")]),l("br"),l("span",{staticClass:"line-number"},[e._v("9")]),l("br"),l("span",{staticClass:"line-number"},[e._v("10")]),l("br")])])]),e._v(" "),l("p",[e._v("我们把所有的代理抽象出来，成为一个Protocal文件。这两个方法的作用：\n-(void)didClickCellAddBtnWithIndexPathRow:(NSInteger)index;:Cell视图调用它去Presenter层实现点击逻辑的处理\n-(void)reloadUI;: Presenter调用它去更新主视图View或者Controller")]),e._v(" "),l("div",{staticClass:"custom-block tip"},[l("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v('//Presenter.h\n#import <Foundation/Foundation.h>\n#import <UIKit/UIKit.h>\n#import "DemoProtocal.h"\n\nNS_ASSUME_NONNULL_BEGIN\n\n@interface Presenter : NSObject\n@property (nonatomic, strong,readonly) NSMutableArray *dataArray;\n@property (nonatomic, weak) id<DemoProtocal>delegate;//协议，去更新主视图UI\n// 更新 TableView UI 根据需求\n- (void)requestDataAndUpdateUI;\n//更新 cell UI\n- (void)updateCell:(UITableViewCell*)cell withIndex:(NSInteger)index;\n@end\n')])]),e._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[e._v("1")]),l("br"),l("span",{staticClass:"line-number"},[e._v("2")]),l("br"),l("span",{staticClass:"line-number"},[e._v("3")]),l("br"),l("span",{staticClass:"line-number"},[e._v("4")]),l("br"),l("span",{staticClass:"line-number"},[e._v("5")]),l("br"),l("span",{staticClass:"line-number"},[e._v("6")]),l("br"),l("span",{staticClass:"line-number"},[e._v("7")]),l("br"),l("span",{staticClass:"line-number"},[e._v("8")]),l("br"),l("span",{staticClass:"line-number"},[e._v("9")]),l("br"),l("span",{staticClass:"line-number"},[e._v("10")]),l("br"),l("span",{staticClass:"line-number"},[e._v("11")]),l("br"),l("span",{staticClass:"line-number"},[e._v("12")]),l("br"),l("span",{staticClass:"line-number"},[e._v("13")]),l("br"),l("span",{staticClass:"line-number"},[e._v("14")]),l("br"),l("span",{staticClass:"line-number"},[e._v("15")]),l("br")])])]),e._v(" "),l("p",[e._v("dataArray : 视图需要的数据源")]),e._v(" "),l("ul",[l("li",[e._v("(void)requestDataAndUpdateUI;:主视图Controller调用，去更新自己的UI")]),e._v(" "),l("li",[e._v("(void)updateCell:(UITableViewCell*)cell withIndex:(NSInteger)index;:更新 Cell的UI")])]),e._v(" "),l("div",{staticClass:"custom-block tip"},[l("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v('//Controller 层\n- (void)iniData{\n    self.presenter = [[Presenter alloc] init];\n    self.presenter.delegate = self;\n    [self.presenter requestDataAndUpdateUI];\n}\n...\n\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n    return self.presenter.dataArray.count;\n}\n- (UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n\n    MVPTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"Cell_identifer"];\n    if(cell == nil){\n        cell = [[MVPTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"Cell_identifer"];\n    }\n    //更新cell UI 数据\n    [self.presenter updateCell:cell withIndex:indexPath.row];\n    cell.selectionStyle = UITableViewCellSelectionStyleNone;\n    return cell;\n}\n\n#pragma mark - DemoProtocal\n//Presenter 的代理回调 数据更新了通知View去更新视图\n- (void)reloadUI{\n    [self.mainTabelView reloadData];\n}\n')])]),e._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[e._v("1")]),l("br"),l("span",{staticClass:"line-number"},[e._v("2")]),l("br"),l("span",{staticClass:"line-number"},[e._v("3")]),l("br"),l("span",{staticClass:"line-number"},[e._v("4")]),l("br"),l("span",{staticClass:"line-number"},[e._v("5")]),l("br"),l("span",{staticClass:"line-number"},[e._v("6")]),l("br"),l("span",{staticClass:"line-number"},[e._v("7")]),l("br"),l("span",{staticClass:"line-number"},[e._v("8")]),l("br"),l("span",{staticClass:"line-number"},[e._v("9")]),l("br"),l("span",{staticClass:"line-number"},[e._v("10")]),l("br"),l("span",{staticClass:"line-number"},[e._v("11")]),l("br"),l("span",{staticClass:"line-number"},[e._v("12")]),l("br"),l("span",{staticClass:"line-number"},[e._v("13")]),l("br"),l("span",{staticClass:"line-number"},[e._v("14")]),l("br"),l("span",{staticClass:"line-number"},[e._v("15")]),l("br"),l("span",{staticClass:"line-number"},[e._v("16")]),l("br"),l("span",{staticClass:"line-number"},[e._v("17")]),l("br"),l("span",{staticClass:"line-number"},[e._v("18")]),l("br"),l("span",{staticClass:"line-number"},[e._v("19")]),l("br"),l("span",{staticClass:"line-number"},[e._v("20")]),l("br"),l("span",{staticClass:"line-number"},[e._v("21")]),l("br"),l("span",{staticClass:"line-number"},[e._v("22")]),l("br"),l("span",{staticClass:"line-number"},[e._v("23")]),l("br"),l("span",{staticClass:"line-number"},[e._v("24")]),l("br"),l("span",{staticClass:"line-number"},[e._v("25")]),l("br"),l("span",{staticClass:"line-number"},[e._v("26")]),l("br"),l("span",{staticClass:"line-number"},[e._v("27")]),l("br"),l("span",{staticClass:"line-number"},[e._v("28")]),l("br")])])]),e._v(" "),l("p",[e._v("Controller层初始化Presenter，调用其方法更新自己的UI，可以看到网络数据的获取，处理都在Presenter中，处理完成后通过协议回调给Controller去reload数据")]),e._v(" "),l("div",{staticClass:"custom-block tip"},[l("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v('//Cell\n- (void)addBtnDown:(UIButton*)btn{\n    NSLog(@"%s",__func__);\n    if([self.delegate respondsToSelector:@selector(didClickCellAddBtnWithIndexPathRow:)]){\n        [self.delegate didClickCellAddBtnWithIndexPathRow:self.index];\n    }\n}\n')])]),e._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[e._v("1")]),l("br"),l("span",{staticClass:"line-number"},[e._v("2")]),l("br"),l("span",{staticClass:"line-number"},[e._v("3")]),l("br"),l("span",{staticClass:"line-number"},[e._v("4")]),l("br"),l("span",{staticClass:"line-number"},[e._v("5")]),l("br"),l("span",{staticClass:"line-number"},[e._v("6")]),l("br"),l("span",{staticClass:"line-number"},[e._v("7")]),l("br")])])]),e._v(" "),l("p",[e._v("Cell层点击事件通过协议调用，而这个协议方法的实现是在Presenter中实现的。\nMVP模式也有自身的缺点，所有的用户操作和更新UI的回调需要定义，随着交互越来越复杂，这些定义都要有很大一坨代码。逻辑过于复杂的情况下，Present本身也会变得臃肿。所以衍生出了MVVM模式。")]),e._v(" "),l("h2",{attrs:{id:"mvvm-rac设计模式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#mvvm-rac设计模式"}},[e._v("#")]),e._v(" MVVM+RAC设计模式")]),e._v(" "),l("p",[l("img",{attrs:{src:"https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-27-at-09.48.40.2e1lg4o3h9z4.webp",alt:"Screenshot-2023-08-27-at-09"}})]),e._v(" "),l("p",[e._v("MVVM")]),e._v(" "),l("p",[e._v("M: Model 数据层，负责网络数据的处理，数据持久化存储和读取等工作")]),e._v(" "),l("p",[e._v("V: View 视图层，此时的视图层包括Controller，负责呈现从数据层传递的数据渲染工作，以及与用户的交互")]),e._v(" "),l("p",[e._v("VM:ViewModel层， view-model 既是视图层的抽象，又提供了要访问的模型数据的包装。 也就是说，它包含一个可以被转换为视图的模型，并且还包含了一些命令，视图层可以使用这些命令更改模型。")]),e._v(" "),l("p",[e._v("通过架构图可以看到，MVVM模式跟MVP模式基本类似。主要区别是在MVP基础上加入了双向绑定机制。当被绑定对象某个值的变化时，绑定对象会自动感知，无需被绑定对象主动通知绑定对象。可以使用KVO和RAC实现。我们这里采用了RAC的实现方式。关于RAC如果不熟悉的小伙伴可以点这里,我们这篇文章不在涉及。")]),e._v(" "),l("p",[e._v("业务场景：")]),e._v(" "),l("ul",[l("li",[l("p",[e._v("用户交互输入")])]),e._v(" "),l("li",[l("p",[e._v("View将数据直接传送给ViewModel，ViewModel保存这些状态数据")])]),e._v(" "),l("li",[l("p",[e._v("在有需要的情况下，ViewModel会将数据传送给Model")])]),e._v(" "),l("li",[l("p",[e._v("Model在更新完成之后通知ViewModel")])]),e._v(" "),l("li",[l("p",[e._v("ViewModel从Model中获取最新的模型，并且更新自己的数据状态")])]),e._v(" "),l("li",[l("p",[e._v("View根据最新的ViewModel的数据进行重新渲染")])])]),e._v(" "),l("h3",{attrs:{id:"mvvm代码示例"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#mvvm代码示例"}},[e._v("#")]),e._v(" MVVM代码示例")]),e._v(" "),l("p",[e._v("我们这里包括两层视图：主视图Controller以及Cell，分别对应两层ViewModel：ViewModel和CellViewModel")]),e._v(" "),l("div",{staticClass:"custom-block tip"},[l("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("//ViewModel.h\n\n@interface ViewModel : NSObject\n//发送数据请求的Rac，可以去订阅获取 请求结果\n@property (nonatomic,strong,readonly) RACCommand *requestCommand;\n@property (nonatomic,strong) NSArray *dataArr;//返回子级对象的ViewModel\n- (CellViewModel *)itemViewModelForIndex:(NSInteger)index;\n@end\n")])]),e._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[e._v("1")]),l("br"),l("span",{staticClass:"line-number"},[e._v("2")]),l("br"),l("span",{staticClass:"line-number"},[e._v("3")]),l("br"),l("span",{staticClass:"line-number"},[e._v("4")]),l("br"),l("span",{staticClass:"line-number"},[e._v("5")]),l("br"),l("span",{staticClass:"line-number"},[e._v("6")]),l("br"),l("span",{staticClass:"line-number"},[e._v("7")]),l("br"),l("span",{staticClass:"line-number"},[e._v("8")]),l("br")])])]),e._v(" "),l("p",[e._v("RACCommand *requestCommand:提供供主视图调用的命令，调用它去获取网络数据\nNSArray *dataArr: 提供供主视图使用的数据源，注意这里不能用NSMutableArray，因为NSMutableArray不支持KVO，不能被RACObserve。")]),e._v(" "),l("ul",[l("li",[e._v("(CellViewModel *)itemViewModelForIndex:(NSInteger)index; 根据Cell的index返回它需要的的ViewModel")])]),e._v(" "),l("div",{staticClass:"custom-block tip"},[l("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v("@interface CellViewModel : NSObject\n\n@property (nonatomic,copy,readonly) NSString *titleStr;\n\n@property (nonatomic,copy,readonly) NSString *numStr;\n\n@property (nonatomic,copy,readonly) RACCommand *addCommand;\n\n- (instancetype)initWithModel:(DemoModel *)model;\n\n@end\n")])]),e._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[e._v("1")]),l("br"),l("span",{staticClass:"line-number"},[e._v("2")]),l("br"),l("span",{staticClass:"line-number"},[e._v("3")]),l("br"),l("span",{staticClass:"line-number"},[e._v("4")]),l("br"),l("span",{staticClass:"line-number"},[e._v("5")]),l("br"),l("span",{staticClass:"line-number"},[e._v("6")]),l("br"),l("span",{staticClass:"line-number"},[e._v("7")]),l("br"),l("span",{staticClass:"line-number"},[e._v("8")]),l("br"),l("span",{staticClass:"line-number"},[e._v("9")]),l("br"),l("span",{staticClass:"line-number"},[e._v("10")]),l("br"),l("span",{staticClass:"line-number"},[e._v("11")]),l("br")])])]),e._v(" "),l("p",[e._v("CellViewModel: 暴露出Cell渲染需要的所有数据\nRACCommand *addCommand;: 按钮点击事件的指令，触发后需要在CellViewModel里面做处理。")]),e._v(" "),l("div",{staticClass:"custom-block tip"},[l("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v('//controller\n- (void)iniData{\n    self.viewModel = [[ViewModel alloc] init];\n    // 发送请求\n    RACSignal *signal = [self.viewModel.requestCommand execute:@{@"page":@"1"}];\n    [signal subscribeNext:^(id x) {\n        NSLog(@"x=======%@",x);\n        if([x boolValue] == 1){//请求成功\n            [self.mainTabelView reloadData];\n        }\n    }];\n}\n- (UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n\n    MVVMTableVIewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"Cell_identifer"];\n    if(cell == nil){\n        cell = [[MVVMTableVIewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"Cell_identifer"];\n    }\n    //更新cell UI 数据\n    cell.cellViewModel = [self.viewModel itemViewModelForIndex:indexPath.row];\n    cell.selectionStyle = UITableViewCellSelectionStyleNone;\n\n    return cell;\n}\n')])]),e._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[e._v("1")]),l("br"),l("span",{staticClass:"line-number"},[e._v("2")]),l("br"),l("span",{staticClass:"line-number"},[e._v("3")]),l("br"),l("span",{staticClass:"line-number"},[e._v("4")]),l("br"),l("span",{staticClass:"line-number"},[e._v("5")]),l("br"),l("span",{staticClass:"line-number"},[e._v("6")]),l("br"),l("span",{staticClass:"line-number"},[e._v("7")]),l("br"),l("span",{staticClass:"line-number"},[e._v("8")]),l("br"),l("span",{staticClass:"line-number"},[e._v("9")]),l("br"),l("span",{staticClass:"line-number"},[e._v("10")]),l("br"),l("span",{staticClass:"line-number"},[e._v("11")]),l("br"),l("span",{staticClass:"line-number"},[e._v("12")]),l("br"),l("span",{staticClass:"line-number"},[e._v("13")]),l("br"),l("span",{staticClass:"line-number"},[e._v("14")]),l("br"),l("span",{staticClass:"line-number"},[e._v("15")]),l("br"),l("span",{staticClass:"line-number"},[e._v("16")]),l("br"),l("span",{staticClass:"line-number"},[e._v("17")]),l("br"),l("span",{staticClass:"line-number"},[e._v("18")]),l("br"),l("span",{staticClass:"line-number"},[e._v("19")]),l("br"),l("span",{staticClass:"line-number"},[e._v("20")]),l("br"),l("span",{staticClass:"line-number"},[e._v("21")]),l("br"),l("span",{staticClass:"line-number"},[e._v("22")]),l("br"),l("span",{staticClass:"line-number"},[e._v("23")]),l("br"),l("span",{staticClass:"line-number"},[e._v("24")]),l("br")])])]),e._v(" "),l("p",[e._v("iniData:初始化ViewModel，并发送请求命令。这里可以监听这个完成信号，进行刷新视图操作\ncell.cellViewModel = [self.viewModel itemViewModelForIndex:indexPath.row]; 根据主视图的ViewModel去获取Cell的ViewModel，实现cell的数据绑定。")]),e._v(" "),l("div",{staticClass:"custom-block tip"},[l("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[e._v('//TableViewCell\n\n    RAC(self.titleLabel,text) = RACObserve(self, cellViewModel.titleStr);\n    RAC(self.numLabel,text) = RACObserve(self, cellViewModel.numStr);\n\n    [[self.addBtn rac_signalForControlEvents:UIControlEventTouchUpInside] subscribeNext:^(id x) {\n        NSLog(@">>>>>");\n        [self.cellViewModel.addCommand execute:nil];\n    }];\n\n')])]),e._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[e._v("1")]),l("br"),l("span",{staticClass:"line-number"},[e._v("2")]),l("br"),l("span",{staticClass:"line-number"},[e._v("3")]),l("br"),l("span",{staticClass:"line-number"},[e._v("4")]),l("br"),l("span",{staticClass:"line-number"},[e._v("5")]),l("br"),l("span",{staticClass:"line-number"},[e._v("6")]),l("br"),l("span",{staticClass:"line-number"},[e._v("7")]),l("br"),l("span",{staticClass:"line-number"},[e._v("8")]),l("br"),l("span",{staticClass:"line-number"},[e._v("9")]),l("br"),l("span",{staticClass:"line-number"},[e._v("10")]),l("br")])])]),e._v(" "),l("p",[e._v("在Cell里面进行与ViewModel的数据绑定，这边有个注意Racobserve左边只有self右边才有viewModel.titleStr这样就避Cell重用的问题。\n[self.cellViewModel.addCommand execute:nil];:按钮的点击方法触发，事件的处理在CellViewModel中。")])])}),[],!1,null,null,null);l.default=a.exports}}]);