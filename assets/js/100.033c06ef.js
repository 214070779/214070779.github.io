(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{445:function(s,n,t){"use strict";t.r(n);var a=t(4),r=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_2-5-回溯算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-回溯算法"}},[s._v("#")]),s._v(" 2.5 回溯算法")]),s._v(" "),n("h2",{attrs:{id:"_2-1-1-什么是回溯算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-什么是回溯算法"}},[s._v("#")]),s._v(" 2.1.1 什么是回溯算法")]),s._v(" "),n("p",[n("strong",[s._v("回溯算法是一种深度优先的搜索技术，它遵循一种“试错”的思路。")]),s._v(" 在解决问题的过程中，我们通过选择某个路径并探索下去，然后发现当前选择并不是最优或者不符合约束条件时，就返回上一步重新选择路径，直到找到问题的解或者遍历完所有可能的路径。")]),s._v(" "),n("p",[n("strong",[s._v("回溯算法的步骤：")])]),s._v(" "),n("ul",[n("li",[n("p",[n("strong",[s._v("定义问题的解空间：")]),s._v(" 确定问题的解可表示为一个N维向量，其中N是问题的规模，一般是一个数组。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("确定约束条件：")]),s._v(" 定义问题的解必须满足的条件，以便在搜索过程中剪枝，"),n("strong",[s._v("即找到解，进行减枝。")])])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("选择合适的搜索顺序：")]),s._v(" 根据问题的特点，选择合适的搜索顺序，以提高搜索效率。")])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("编码回溯函数：")]),s._v(" 实现回溯函数，其中包括终止条件、约束条件的判断和路径的选择，"),n("strong",[s._v("这个是核心。")])])]),s._v(" "),n("li",[n("p",[n("strong",[s._v("执行回溯搜索：")]),s._v(" 根据回溯函数进行递归搜索，记录符合条件的解并完成状态回退。\n这样描述可能有点抽象，下面通过几道例题进行加深你的理解。")])])]),s._v(" "),n("h2",{attrs:{id:"_2-1-2-回溯算法的适用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-回溯算法的适用场景"}},[s._v("#")]),s._v(" 2.1.2 回溯算法的适用场景")]),s._v(" "),n("p",[s._v("回溯算法的应用领域 回溯算法可以用于解决各种问题，尤其是那些具有以下特征的问题：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("组合问题")]),s._v("：在给定一组候选解的情况下，找到所有可能的组合。")]),s._v(" "),n("li",[n("strong",[s._v("排列问题")]),s._v("：在给定一组元素的情况下，找到所有可能的排列。")]),s._v(" "),n("li",[n("strong",[s._v("子集问题")]),s._v("：在给定一组元素的情况下，找到所有可能的子集。")]),s._v(" "),n("li",[n("strong",[s._v("图问题")]),s._v("：对于给定的图结构，找到满足某些约束条件的路径。")])]),s._v(" "),n("h4",{attrs:{id:"_2-1-3-回溯算法模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-回溯算法模板"}},[s._v("#")]),s._v(" 2.1.3 回溯算法模板")]),s._v(" "),n("p",[s._v("回溯算法可以看作森林的遍历过程。")]),s._v(" "),n("p",[n("strong",[s._v("简化成一个二维坐标：")])]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("x为同一层级可选择的路径")])]),s._v(" "),n("li",[n("strong",[s._v("y为递归深度")])])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://i-blog.csdnimg.cn/blog_migrate/e9e7f7e2d8d4eeb36579e4e2bdbd20c8.png#pic_center",alt:"在这里插入图片描述"}})]),s._v(" "),n("p",[n("strong",[s._v("模板代码：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("List<?> result = new ArrayList<>();\nvoid backtrack(路径, 选择列表):\n    if (满足结束条件){\n        result.add(路径)\n        return\n    }\n    for (选择 in 选择列表){ // x\n        做选择\n        backtrack(路径, 选择列表) // y\n        撤销选择\n    }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h4",{attrs:{id:"_2-4-4-回溯算法详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-4-回溯算法详解"}},[s._v("#")]),s._v(" 2.4.4 回溯算法详解")]),s._v(" "),n("h5",{attrs:{id:"_2-4-5-1-leetcode-46-全排列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-5-1-leetcode-46-全排列"}},[s._v("#")]),s._v(" 2.4.5.1 leetcode 46. 全排列")]),s._v(" "),n("p",[s._v("给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("示例 1：\n\n输入：nums = [1,2,3]\n输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n示例 2：\n\n输入：nums = [0,1]\n输出：[[0,1],[1,0]]\n示例 3：\n\n输入：nums = [1]\n输出：[[1]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);