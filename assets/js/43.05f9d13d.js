(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{394:function(s,n,a){"use strict";a.r(n);var e=a(4),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"什么原因导致了卡顿"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么原因导致了卡顿"}},[s._v("#")]),s._v(" 什么原因导致了卡顿")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttps%253A%252F%252Fbaike.baidu.com%252Fitem%252F%2525E6%2525AD%2525BB%2525E9%252594%252581%252F2196938%253Ffr%253Daladdin",title:"https://links.jianshu.com/go?to=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E6%25AD%25BB%25E9%2594%2581%2F2196938%3Ffr%3Daladdin",target:"_blank",rel:"noopener noreferrer"}},[s._v("死锁"),n("OutboundLink")],1)]),s._v(" "),n("li",[s._v("抢锁")]),s._v(" "),n("li",[s._v("大量的Ui绘制,复杂的UI，图文混排")]),s._v(" "),n("li",[s._v("主线程大量IO、大量计算")])]),s._v(" "),n("h2",{attrs:{id:"相关知识补充-信号量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关知识补充-信号量"}},[s._v("#")]),s._v(" 相关知识补充 - 信号量")]),s._v(" "),n("p",[s._v("信号量就是一个资源计数器，对信号量有两个操作来达到互斥，分别是P和V操作。 一般情况是这样进行临界访问或互斥访问的： 设信号量值为1， 当一个进程1运行时，使用资源，进行P操作，即对信号量值减1，也就是资源数少了1个，这时信号量值为0。")]),s._v(" "),n("p",[s._v("系统中规定当信号量值为0时，必须等待，直到信号量值不为零才能继续操作。 这时如果进程2想要运行，那么也必须进行P操作，但是此时信号量为0，所以无法减1，即不能P操作，也就阻塞，这样就到到了进程1排他访问。")]),s._v(" "),n("p",[s._v("当进程1运行结束后，释放资源，进行V操作。资源数重新加1，这时信号量的值变为1. 这时进程2发现资源数不为0，信号量能进行P操作了，立即执行P操作。信号量值又变为0，这时进程2有资源，排他访问资源。 这就是信号量来控制互斥的原理。")]),s._v(" "),n("h2",{attrs:{id:"寻找卡顿切入点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#寻找卡顿切入点"}},[s._v("#")]),s._v(" 寻找卡顿切入点")]),s._v(" "),n("p",[s._v("监控卡顿,最直接就是找到主线程都在干些啥玩意儿.我们知道一个线程的消息事件处理都是依赖于NSRunLoop来驱动,所以要知道线程正在调用什么方法,就需要从NSRunLoop来入手.CFRunLoop的代码是开源,可以在此处查阅到 "),n("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Flinks.jianshu.com%2Fgo%3Fto%3Dhttp%253A%252F%252Fopensource.apple.com%252Fsource%252FCF%252FCF-1151.16%252FCFRunLoop.c",title:"https://links.jianshu.com/go?to=http%3A%2F%2Fopensource.apple.com%2Fsource%2FCF%2FCF-1151.16%2FCFRunLoop.c",target:"_blank",rel:"noopener noreferrer"}},[s._v("CFRunLoop.c"),n("OutboundLink")],1),s._v(" 源代码")]),s._v(" "),n("p",[s._v("其中核心方法CFRunLoopRun简化后的主要逻辑大概是这样的:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/// 1. 通知Observers，即将进入RunLoop\n    /// 此处有Observer会创建AutoreleasePool: _objc_autoreleasePoolPush();\n    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopEntry);\n    do {\n\n        /// 2. 通知 Observers: 即将触发 Timer 回调。\n        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeTimers);\n        /// 3. 通知 Observers: 即将触发 Source (非基于port的,Source0) 回调。\n        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeSources);\n        __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);\n\n        /// 4. 触发 Source0 (非基于port的) 回调。\n        __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__(source0);\n\n        /// 5. GCD处理main block\n        __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__(block);\n\n        /// 6. 通知Observers，即将进入休眠\n        /// 此处有Observer释放并新建AutoreleasePool: _objc_autoreleasePoolPop(); _objc_autoreleasePoolPush();\n        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopBeforeWaiting);\n\n        /// 7. sleep to wait msg.\n        mach_msg() -> mach_msg_trap();\n\n\n        /// 8. 通知Observers，线程被唤醒\n        __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopAfterWaiting);\n\n        /// 9. 如果是被Timer唤醒的，回调Timer\n        __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__(timer);\n\n        /// 9. 如果是被dispatch唤醒的，执行所有调用 dispatch_async 等方法放入main queue 的 block\n        __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(dispatched_block);\n\n        /// 9. 如果如果Runloop是被 Source1 (基于port的) 的事件唤醒了，处理这个事件\n        __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__(source1);\n\n\n    } while (...);\n\n    /// 10. 通知Observers，即将退出RunLoop\n    /// 此处有Observer释放AutoreleasePool: _objc_autoreleasePoolPop();\n    __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__(kCFRunLoopExit);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br")])]),n("p",[s._v("不难发现NSRunLoop调用方法主要就是在kCFRunLoopBeforeSources和kCFRunLoopBeforeWaiting之间,还有kCFRunLoopAfterWaiting之后,也就是如果我们发现这两个时间内耗时太长,那么就可以判定出此时主线程卡顿。")]),s._v(" "),n("p",[s._v("iOS如何监控线程卡顿？")]),s._v(" "),n("p",[s._v("说一下"),n("code",[s._v("QiLagMonitor")]),s._v("中的大致实现思路。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("首先，创建一个观察者"),n("code",[s._v("runLoopObserver")]),s._v("，用于观察主线程的"),n("code",[s._v("runloop")]),s._v("状态。同时，还要创建一个信号量"),n("code",[s._v("dispatchSemaphore")]),s._v("，用于保证同步操作。")])]),s._v(" "),n("li",[n("p",[s._v("其次，将观察者"),n("code",[s._v("runLoopObserver")]),s._v("添加到主线程"),n("code",[s._v("runloop")]),s._v("中观察。")])]),s._v(" "),n("li",[n("p",[s._v("然后，开启一个子线程，并且在子线程中开启一个持续的"),n("code",[s._v("loop")]),s._v("来监控主线程"),n("code",[s._v("runloop")]),s._v("的状态。")])]),s._v(" "),n("li",[n("p",[s._v("如果发现主线程"),n("code",[s._v("runloop")]),s._v("的状态卡在为"),n("code",[s._v("BeforeSources")]),s._v("或者"),n("code",[s._v("AfterWaiting")]),s._v("超过"),n("code",[s._v("88")]),s._v("毫秒时，即表明主线程当前卡顿。这时候，我们保存主线程当前的调用堆栈即可达成监控目的。")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('#import <Foundation/Foundation.h>\n\n@interface LagMonitor : NSObject\n\n+ (instancetype)sharedInstance;\n- (void)startMonitoring;\n\n@end\n\n@implementation LagMonitor {\n    CFRunLoopObserverRef _observer;\n    dispatch_semaphore_t _semaphore;\n    BOOL _isMonitoring;\n}\n\n+ (instancetype)sharedInstance {\n    static LagMonitor *instance;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        instance = [[LagMonitor alloc] init];\n    });\n    return instance;\n}\n\n- (void)startMonitoring {\n    if (_isMonitoring) {\n        return;\n    }\n\n    _isMonitoring = YES;\n\n    // 创建信号量，用于控制RunLoop监测的时间间隔\n    _semaphore = dispatch_semaphore_create(0);\n\n    // 创建观察者，监听RunLoop的各个阶段\n    CFRunLoopObserverContext context = {0, (__bridge void *)self, NULL, NULL, NULL};\n    _observer = CFRunLoopObserverCreate(kCFAllocatorDefault, kCFRunLoopAllActivities, YES, 0, &runLoopObserverCallback, &context);\n    if (_observer) {\n        // 将观察者添加到主线程的RunLoop中\n        CFRunLoopAddObserver(CFRunLoopGetMain(), _observer, kCFRunLoopCommonModes);\n\n        // 创建一个子线程用于监测RunLoop的状态\n        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n            while (_isMonitoring) {                // 等待信号量，即等待指定的时间间隔\n                long semaphoreWait = dispatch_semaphore_wait(_semaphore, dispatch_time(DISPATCH_TIME_NOW, 50 * NSEC_PER_MSEC));\n                if (semaphoreWait != 0) {\n                    // 如果信号量等待超时，则认为主线程出现卡顿\n                    [BacktraceLogger printMainThreadStack];\n                }\n            }\n        });\n    } else {\n        NSLog(@"创建 CFRunLoopObserverRef 失败");    \n    }\n}\n\nvoid runLoopObserverCallback(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info) {\n    LagMonitor *monitor = (__bridge LagMonitor *)info;\n    // 发送信号量，通知子线程主线程的RunLoop正在运行\n    dispatch_semaphore_signal(monitor->_semaphore);\n}\n\n@end\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br")])]),n("div",{staticClass:"language-打印信息 line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('import Foundation\n\nclass BacktraceLogger {\n\n    // 在需要时打印主线程的堆栈信息\n    static func printMainThreadStack() {\n        if Thread.isMainThread {\n            if let callStackSymbols = Thread.callStackSymbols as? [String] {\n                print("Main Thread Stack Trace:")\n                for symbol in callStackSymbols {\n                    print(symbol)\n                }\n            }\n        } else {\n            DispatchQueue.main.async {\n                printMainThreadStack()\n            }\n        }\n    }\n\n    // 在程序启动时开始监控崩溃\n    static func startMonitoringCrashes() {\n        NSSetUncaughtExceptionHandler { exception in\n            print("Crash Detected:")\n            print(exception)\n            print(exception.callStackSymbols.joined(separator: "\\n"))\n        }\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("p",[s._v("具体方案：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("static void runLoopObserverCallBack(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void *info)\n{\n    MyClass *object = (__bridge MyClass*)info;\n\n    // 记录状态值\n    object->activity = activity;\n\n    // 发送信号\n    dispatch_semaphore_t semaphore = moniotr->semaphore;\n    dispatch_semaphore_signal(semaphore);\n}\n\n- (void)registerObserver\n{\n    CFRunLoopObserverContext context = {0,(__bridge void*)self,NULL,NULL};\n    CFRunLoopObserverRef observer = CFRunLoopObserverCreate(kCFAllocatorDefault,\n                                                            kCFRunLoopAllActivities,\n                                                            YES,\n                                                            0,\n                                                            &runLoopObserverCallBack,\n                                                            &context);\n    CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes);\n\n    // 创建信号\n    semaphore = dispatch_semaphore_create(0);\n\n    // 在子线程监控时长\n    dispatch_async(dispatch_get_global_queue(0, 0), ^{\n        while (YES)\n        {\n            // 假定连续5次超时50ms认为卡顿(当然也包含了单次超时250ms)\n            long st = dispatch_semaphore_wait(semaphore, dispatch_time(DISPATCH_TIME_NOW, 50*NSEC_PER_MSEC));\n            if (st != 0)\n            {\n                if (activity==kCFRunLoopBeforeSources || activity==kCFRunLoopAfterWaiting)\n                {\n                    if (++timeoutCount < 5)\n                        continue;\n                    // 检测到卡顿，进行卡顿上报\n                }\n            }\n            timeoutCount = 0;\n        }\n    });\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br")])]),n("p",[s._v("卡顿监控的阈值计算")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//创建子线程监控\ndispatch_async(dispatch_get_global_queue(0, 0), ^{\n    //子线程开启一个持续的 loop 用来进行监控\n    while (YES) {\n        long semaphoreWait = dispatch_semaphore_wait(dispatchSemaphore, dispatch_time(DISPATCH_TIME_NOW, 3 * NSEC_PER_SEC));\n        if (semaphoreWait != 0) {\n            if (!runLoopObserver) {\n                timeoutCount = 0;\n                dispatchSemaphore = 0;\n                runLoopActivity = 0;\n                return;\n            }\n            //BeforeSources 和 AfterWaiting 这两个状态能够检测到是否卡顿\n            if (runLoopActivity == kCFRunLoopBeforeSources || runLoopActivity == kCFRunLoopAfterWaiting) {\n                //将堆栈信息上报服务器的代码放到这里\n            } //end activity\n        }// end semaphore wait\n        timeoutCount = 0;\n    }// end while\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("代码中的"),n("code",[s._v("NSEC_PER_SEC")]),s._v("，代表的是触发卡顿的时间阈值，单位是"),n("code",[s._v("秒")]),s._v("。可以看到，我们把这个阈值设置成了"),n("code",[s._v("3")]),s._v("秒。那么，这个"),n("code",[s._v("3")]),s._v("秒的阈值是从何而来呢？这样设置合理吗？")]),s._v(" "),n("p",[s._v("其实，触发卡顿的时间阈值，我们可以根据"),n("code",[s._v("WatchDog")]),s._v("机制来设置。"),n("code",[s._v("WatchDog")]),s._v("在不同状态下设置为不同时间，如下所示：")]),s._v(" "),n("ul",[n("li",[s._v("启动（Launch）：20秒；")]),s._v(" "),n("li",[s._v("恢复（Resume）：10秒；")]),s._v(" "),n("li",[s._v("挂起（Suspend）：10秒；")]),s._v(" "),n("li",[s._v("退出（Quit）：6秒；")]),s._v(" "),n("li",[s._v("后台（Background）：3分钟（在"),n("code",[s._v("iOS7")]),s._v("之前，每次申请10分钟，之后改为每次申请3分钟，可以连续申请，最多申请到10分钟）；")])]),s._v(" "),n("p",[s._v("通过"),n("code",[s._v("WatchDog")]),s._v("设置的时间，我们可以把启动的阈值设置为10秒，其他状态则都默认为3秒。总的原则就是要小于"),n("code",[s._v("WatchDog")]),s._v("的限制时间。不过，这个阈值也不用小的太多，原则就是我们要优先解决用户感知最明显的体验问题；")]),s._v(" "),n("h4",{attrs:{id:"量化卡顿的程度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#量化卡顿的程度"}},[s._v("#")]),s._v(" 量化卡顿的程度")]),s._v(" "),n("p",[n("strong",[s._v("原理：")]),s._v(" 利用观察Runloop各种状态变化的持续时间来检测计算是否发生卡顿\n一次有效卡顿采用了“N次卡顿超过阈值T”的判定策略，即一个时间段内卡顿的次数累计大于N时才触发采集和上报：举例，卡顿阈值T=500ms、卡顿次数N=1，可以判定为单次耗时较长的一次有效卡顿；而卡顿阈值T=50ms、卡顿次数N=5，可以判定为频次较快的一次有效卡顿")]),s._v(" "),n("p",[n("strong",[s._v("实践：")]),s._v(" 我们需要开启一个子线程,实时计算两个状态区域之间的耗时是否到达某个阀值。另外卡顿需要覆盖到多次连续小卡顿和单次长时间卡顿两种情景。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);