(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{423:function(s,a,n){"use strict";n.r(a);var e=n(4),t=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"类-class-和-结构体-struct-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类-class-和-结构体-struct-有什么区别"}},[s._v("#")]),s._v(" 类(class) 和 结构体(struct) 有什么区别?")]),s._v(" "),a("p",[s._v("在 Swift 中,class 是引用类型(指针类型), struct 是值类型 String,Array,Dictionary,Set")]),s._v(" "),a("ul",[a("li",[s._v("值类型: 比如结构体,枚举,是在栈空间上存储和操作的")])]),s._v(" "),a("p",[s._v("引用类型")]),s._v(" "),a("ul",[a("li",[a("p",[s._v('引用类型只会使用引用对象的一个"指向"; 赋值给var、let或者给函数传参，是将内存地址拷贝一份,类似于制作一个文件的替身(快捷方式、链接)，指向的是同一个文件。属于浅拷贝(shallow copy)')])]),s._v(" "),a("li",[a("p",[s._v("引用类型: 比如 Class,是在堆空间上存储和操作的")])])]),s._v(" "),a("p",[s._v("类：继承，引用计数的。")]),s._v(" "),a("p",[s._v("结构体，不用考虑引用计数的问题。")]),s._v(" "),a("h2",{attrs:{id:"的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#的区别"}},[s._v("#")]),s._v(" ?，??的区别")]),s._v(" "),a("p",[s._v("1）？用来声明可选值，如果变量未初始化则自动初始化nil；在操作可选值时，如果可选值是nil则不响应后续的操作；使用as?进行向下转型操作；")]),s._v(" "),a("p",[s._v("2）?? 用来判断左侧可选值非空（not nil）时返回左侧值可选值，左侧可选值为空（nil）则返回右侧的值。")]),s._v(" "),a("h2",{attrs:{id:"any和anyobject的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#any和anyobject的区别"}},[s._v("#")]),s._v(" Any和AnyObject的区别？")]),s._v(" "),a("p",[s._v("AnyObject只能表示引用类型的任何实例，相当于Objective-C中的id类型。")]),s._v(" "),a("p",[s._v("Any可以表示类，结构体，枚举的任何实例。")]),s._v(" "),a("p",[s._v("AnyObject是Any的子集。")]),s._v(" "),a("h2",{attrs:{id:"swift的copy-on-write机制了解过吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swift的copy-on-write机制了解过吗"}},[s._v("#")]),s._v(" Swift的Copy On Write机制了解过吗？")]),s._v(" "),a("p",[s._v("1）Swift中参数传递是值类型传递，它会对值类型进行copy操作，当传递一个值类型变量时（变量赋值，函数传参），它传递的是一份新的copy值，两个变量指向不同的内存区域。如果频繁操作的变量占内存较大，会产生性能问题。")]),s._v(" "),a("p",[s._v("2）Copy On Write是一种优化值类型copy的机制，对String、Int、Float等非集合数据类型，赋值直接拷贝，对于Array等集合类型数据，只有传递的内容值改变后才进行拷贝操作。")]),s._v(" "),a("p",[s._v("3）Copy On Write的实现：set函数中判断是否存在多个引用，只有存在多个引用的情况下才会进行拷贝操作。另外，自定义结构体是不支持Copy On Write的。")]),s._v(" "),a("p",[s._v("苹果建议当复制大的值类型数据的时候，使用写时复制技术，那什么是写时复制呢？我们现在看一段代码：")]),s._v(" "),a("p",[s._v("值类型(比如:struct),在复制时,复制对象与原对象实际上在内存中指向同一个对象,当且仅当修改复制的对象时,才会在内存中创建一个新的对象\n为了提升性能，Struct, String、Array、Dictionary、Set采取了Copy On Write的技术")]),s._v(" "),a("p",[s._v("比如仅当有“写”操作时，才会真正执行拷贝操作")]),s._v(" "),a("p",[s._v("对于标准库值类型的赋值操作，Swift 能确保最佳性能，所有没必要为了保证最佳性能来避免赋值\nvar array1: [Int] = [0, 1, 2, 3]\nvar array2 = array1")]),s._v(" "),a("p",[s._v("print(address: array1) //0x600000078de0\nprint(address: array2) //0x600000078de0")]),s._v(" "),a("p",[s._v("array2.append(4)")]),s._v(" "),a("p",[s._v("print(address: array2) //0x6000000aa100")]),s._v(" "),a("p",[s._v("我们看到当array2的值没有发生变化的时候，array1和array2指向同一个地址，但是当array2的发生变化时，array2指向地址也变了，很奇怪是吧。")]),s._v(" "),a("h2",{attrs:{id:"什么是自动闭包、逃逸闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是自动闭包、逃逸闭包"}},[s._v("#")]),s._v(" 什么是自动闭包、逃逸闭包？")]),s._v(" "),a("p",[s._v("@autoclosure：自动闭包（默认非逃逸闭包），它是一种自动创建的闭包，用来包装作为参数传递给函数的表达式，不接受任何参数，被调用时返回被包装的表达式的值。自动闭包可以延迟计算，因为只有调用到这个闭包代码才会执行，这样我们便可以控制代码什么时候执行。")]),s._v(" "),a("h2",{attrs:{id:"swift-中-什么可选型-optional"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swift-中-什么可选型-optional"}},[s._v("#")]),s._v(" Swift 中,什么可选型(Optional)")]),s._v(" "),a("p",[s._v("Optional是 OC 中没有的数据类型,是苹果在 Swift 中引入的全新类型,它的特点就是可有值,也可以没有值,当它没有值的时候就是 nil. 并且 Swift 中的nil 和 OC 中 nil 也不一样,在 OC 中只有对象才能为 nil, 而在 Swift 中,当基础类型(整型,浮点,布尔等)没有值的时候,也是 nil, 而不是一个初始值,没有初始值的值是不能使用的,所以就产生了 Optional 类型.定义一个 Optional 的值很容易,只需要在类型后面加上问号(?)就行了")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("在 Swift 中,可选型是为了表达一个变量为空的情况,当一个变量为空,他的值就是 nil")])]),s._v(" "),a("li",[a("p",[s._v("在类型名称后面加个问号? 来定义一个可选型")])]),s._v(" "),a("li",[a("p",[s._v("值类型或者引用类型都可以是可选型变量")])])]),s._v(" "),a("h2",{attrs:{id:"访问控制关键字-open-public-internal-fileprivate-private-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问控制关键字-open-public-internal-fileprivate-private-的区别"}},[s._v("#")]),s._v(" 访问控制关键字 open, public, internal, fileprivate, private 的区别?")]),s._v(" "),a("p",[s._v("Swift 中有个5个级别的访问控制权限,从高到低依次是 open, public, internal, fileprivate, private")]),s._v(" "),a("p",[s._v("它们遵循的基本规则: 高级别的变量不允许被定义为低级别变量的成员变量,比如一个 private 的 class 内部允许包含 public的 String值,反之低级变量可以定义在高级别变量中;")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("open: 具备最高访问权限,其修饰的类可以和方法,可以在任意 模块中被访问和重写.")])]),s._v(" "),a("li",[a("p",[s._v("public: 权限仅次于 open，和 open 唯一的区别是: 不允许其他模块进行继承、重写")])]),s._v(" "),a("li",[a("p",[s._v("internal: 默认权限, 只允许在当前的模块中访问，可以继承和重写,不允许在其他模块中访问")])]),s._v(" "),a("li",[a("p",[s._v("fileprivate: 修饰的对象只允许在当前的文件中访问;")])]),s._v(" "),a("li",[a("p",[s._v("private: 最低级别访问权限,只允许在定义的作用域内访问")])])]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/watertekhqx/article/details/90701418",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.csdn.net/watertekhqx/article/details/90701418"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("swift 中关于open ,public ,internal，fileprivate,private 修饰的说明")]),s._v(" "),a("p",[s._v("open：")]),s._v(" "),a("p",[s._v("用open修饰的类可以在本某块(sdk),或者其他引入本模块的(sdk,module)继承，如果是修饰属性的话可以被此模块或引入了此某块(sdk)的模块（sdk）所重写")]),s._v(" "),a("p",[s._v("public：")]),s._v(" "),a("p",[s._v("类用public(或级别更加等级更低的约束(如private等))修饰后只能在本模块（sdk）中被继承，如果public是修饰属性的话也是只能够被这个module(sdk)中的子类重写")]),s._v(" "),a("p",[s._v("internal")]),s._v(" "),a("p",[s._v("是在模块内部可以访问，在模块外部不可以访问，a belong A , B import A, A 可以访问 a, B 不可以访问a.比如你写了一个sdk。那么这个sdk中有些东西你是不希望外界去访问他，这时候你就需要internal这个关键字（我在导入第三方框架时发现其实没有定义的话sdk里面是默认internal的）")]),s._v(" "),a("p",[s._v("fileprivate")]),s._v(" "),a("p",[s._v("这个修饰跟名字的含义很像，file private 就是文件之间是private的关系，也就是在同一个source文件中还是可以访问的，但是在其他文件中就不可以访问了 a belong to file A, a not belong to file B , 在 file A 中 可以访问 a，在 file B不可以访问a")]),s._v(" "),a("p",[s._v("private")]),s._v(" "),a("p",[s._v("这个修饰约束性比fileprivate的约束性更大，private 作用于某个类，也就是说，对于 class A ,如果属性a是private的，那么除了A外其他地方都不能访问了(fileprivate 和private都是一种对某个类的限制性约束。fileprivate的适用场景可以是某个文件下的extension，如果你的类中的变量定义成了private那么这个变量在你这个类在这个类的文件的拓展中就无法访问了，这时就需要定义为fileprivate)")]),s._v(" "),a("p",[s._v("最后是 Guiding Principle of Access Levels （访问级别的推导原则）：不能在低级别的修饰中定义比自身更高的级别修饰,如public不能修饰在private类中的属性")]),s._v(" "),a("h2",{attrs:{id:"关键字-strong-weak-unowned-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键字-strong-weak-unowned-区别"}},[s._v("#")]),s._v(" 关键字:Strong,Weak,Unowned 区别?")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Swift 的内存管理机制同OC一致,都是ARC管理机制; Strong,和 Weak用法同OC一样")])]),s._v(" "),a("li",[a("p",[s._v("Unowned(无主引用), 不会产生强引用，实例销毁后仍然存储着实例的内存地址(类似于OC中的unsafe_unretained), 试图在实例销毁后访问无主引用，会产生运行时错误(野指针)")])])]),s._v(" "),a("h2",{attrs:{id:"什么是自动闭包、逃逸闭包、非逃逸闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是自动闭包、逃逸闭包、非逃逸闭包"}},[s._v("#")]),s._v(" 什么是自动闭包、逃逸闭包、非逃逸闭包？")]),s._v(" "),a("p",[s._v("非逃逸闭包： 永远不会离开一个函数的局部作用域的闭包就是非逃逸闭包。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('func player(complete:(Bool)->()){ \n    complete(true) //执行闭包 传入真\n}\n self.player { bool in\n            print( bool ? "yes":"no")\n        } // yes\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("逃逸闭包：当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。在形式参数前写@escaping来明确闭包是允许逃逸的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n var completionHanglers: [() -> Void] = []\n        \n        func someFunctionWithEscapingClosure(completionHangler: @escaping () -> Void) {\n            \n        completionHanglers.append(completionHangler)\n        }\ncompletionHanglers.first?()\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("自动闭包：是一种自动创建的闭包，用来把作为实际参数传递给函数的表达式打包的闭包.他不接受任何实际参数,并且当它被调用时,它会返回内部打包的表达式的值.")]),s._v(" "),a("p",[s._v("Autoclosure 是用于延迟执行闭包的一种技术。使用 Autoclosure，我们可以将闭包作为参数传递给函数或方法，但是闭包不会立即执行。相反，它会在需要时才会被执行。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' public   func assert(_ condition:@autoclosure () -> Bool,_ message: @autoclosure () -> String = String(), file:StaticString = #file, line: Unit = #line)\n\nlet num = 3\n  assert(num>3,"num不能大于3")\n\n\nvar customersInLine = ["李一", "张2", "刘3", "赵四", "王五"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        print(customersInLine.count)\n        // 打印出“5”\n        let customerProvider = { self.customersInLine.remove(at: 0) }//自动闭包\n        print(customersInLine.count)//没有执行呢还    还是打印出“5”\n        print("移除了 \\(customerProvider())!") //移除了 李一!\n        print(customersInLine)\n        \n        serve(customer: customersInLine.remove(at: 0))\n        // 不用  @autoclosure 修饰\n        serve2(customer: { customersInLine.remove(at: 0) } )\n    }\n    \n    func serve(customer customerProvider: @autoclosure () -> String) {\n       print("移除了 \\(customerProvider())!")\n        print(customersInLine)\n    }\n    \n    func serve2(customer customerProvider: () -> String) {\n       print("移除了 \\(customerProvider())!")\n        print(customersInLine)\n    }\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("h2",{attrs:{id:"swift的派发机制-参考文章-https-segmentfault-com-a-1190000008063625"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swift的派发机制-参考文章-https-segmentfault-com-a-1190000008063625"}},[s._v("#")]),s._v(" swift的派发机制 参考文章[https://segmentfault.com/a/1190000008063625]")]),s._v(" "),a("p",[s._v("编译型语言有三种基础的函数派发方式: 直接派发(Direct Dispatch), 函数表派发(Table Dispatch) 和 消息机制派发")]),s._v(" "),a("ul",[a("li",[s._v("直接派发 (Direct Dispatch)")])]),s._v(" "),a("p",[s._v("直接派发是最快的, 不止是因为需要调用的指令集会更少, 并且编译器还能够有很大的优化空间, 例如函数内联等，然而, 对于编程来说直接调用也是最大的局限, 而且因为缺乏动态性所以没办法支持继承.直接派发也有人称为静态调用")]),s._v(" "),a("ul",[a("li",[s._v("函数表派发 (Table Dispatch )")])]),s._v(" "),a("p",[s._v("函数表派发是编译型语言实现动态行为最常见的实现方式. 函数表使用了一个数组来存储类声明的每一个函数的指针. 大部分语言把这个称为 “virtual table”(虚函数表), Swift 里称为 “witness table”. 每一个类都会维护一个函数表, 里面记录着类所有的函数, 如果父类函数被 override 的话, 表里面只会保存被 override 之后的函数. 一个子类新添加的函数, 都会被插入到这个数组的最后. 运行时会根据这一个表去决定实际要被调用的函数.\n看看下面两个类:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ParentClass {\n    func method1() {}\n    func method2() {}\n}\nclass ChildClass: ParentClass {\n    override func method2() {}\n    func method3() {}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("在这个情况下, 编译器会创建两个函数表, 一个是 ParentClass 的, 另一个是 ChildClass的:")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/system/4.png")}}),s._v(" "),a("p",[s._v("这张表展示了 ParentClass 和 ChildClass 虚数表里 method1, method2, method3 在内存里的布局.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\nlet obj = ChildClass()\nobj.method2()\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("当一个函数被调用时, 会经历下面的几个过程:")]),s._v(" "),a("p",[s._v("读取对象 0xB00 的函数表.\n读取函数指针的索引. 在这里, method2 的索引是1(偏移量), 也就是 0xB00 + 1.\n跳到 0x222 (函数指针指向 0x222)")]),s._v(" "),a("p",[s._v("查表是一种简单, 易实现, 而且性能可预知的方式. 然而, 这种派发方式比起直接派发还是慢一点. 从字节码角度来看, 多了两次读和一次跳转, 由此带来了性能的损耗. 另一个慢的原因在于编译器可能会由于函数内执行的任务导致无法优化.")]),s._v(" "),a("p",[s._v("这种基于数组的实现, 缺陷在于函数表无法拓展. 子类会在虚数函数表的最后插入新的函数, 没有位置可以让 extension 安全地插入函数.")]),s._v(" "),a("ul",[a("li",[s._v("消息机制派发 (Message Dispatch )")])]),s._v(" "),a("p",[s._v("消息机制是调用函数最动态的方式. 也是 Cocoa 的基石, 这样的机制催生了 KVO, UIAppearence 和 CoreData 等功能. 这种运作方式的关键在于开发者可以在运行时改变函数的行为. 不止可以通过 swizzling 来改变, 甚至可以用 isa-swizzling 修改对象的继承关系, 可以在面向对象的基础上实现自定义派发.")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ParentClass {\n    dynamic func method1() {}\n    dynamic func method2() {}\n}\nclass ChildClass: ParentClass {\n    override func method2() {}\n    dynamic func method3() {}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("Swift 会用树来构建这种继承关系:")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/system/5.png")}}),s._v(" "),a("p",[s._v("这张图很好地展示了 Swift 如何使用树来构建类和子类.")]),s._v(" "),a("p",[s._v("当一个消息被派发, 运行时会顺着类的继承关系向上查找应该被调用的函数. 如果你觉得这样做效率很低, 它确实很低! 然而, 只要缓存建立了起来, 这个查找过程就会通过缓存来把性能提高到和函数表派发一样快")]),s._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("Swift 的派发机制")]),s._v(" "),a("p",[s._v("使用 dynamic 修饰的时候会通过 Objective-C 的运行时进行消息机制派发.\n总结起来有这么几点:")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("值类型总是会使用直接派发, 简单易懂")])]),s._v(" "),a("li",[a("p",[s._v("而协议和类的 extension 都会使用直接派发")])]),s._v(" "),a("li",[a("p",[s._v("NSObject 的 extension 会使用消息机制进行派发")])]),s._v(" "),a("li",[a("p",[s._v("NSObject 声明作用域里的函数都会使用函数表进行派发.")])]),s._v(" "),a("li",[a("p",[s._v("协议里声明的, 并且带有默认实现的函数会使用函数表进行派发.")])])]),s._v(" "),a("h2",{attrs:{id:"什么是函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是函数式编程"}},[s._v("#")]),s._v(" 什么是函数式编程？")]),s._v(" "),a("p",[s._v('面向对象编程：将要解决的问题抽象成一个类，通过给类定义属性和方法，让类帮助我们解决需要处理的问题(即命令式编程，给对象下一个个命令)。\n函数式编程：数学意义上的函数，即映射关系（如：y = f(x)，就是 y 和 x 的对应关系，可以理解为"像函数一样的编程")。它的主要思想是把运算过程尽量写成一系列嵌套的函数调用。\n例:\n数学表达式\n(1 + 2) * 3 - 4\n传统编程\nvar a = 1 + 2\nvar b = a * 3\nvar c = b - 4\n函数式编程\nvar result = subtract(multiply(add(1,2), 3), 4)')]),s._v(" "),a("p",[s._v('函数式编程的好处：\n代码简洁，开发迅速；\n接近自然语言，易于理解；\n更方便的代码管理；\n易于"并发编程"；\n代码的热升级。')])])}),[],!1,null,null,null);a.default=t.exports}}]);