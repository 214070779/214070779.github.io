(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{439:function(_,v,i){"use strict";i.r(v);var t=i(4),a=Object(t.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"算法架构图解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算法架构图解"}},[_._v("#")]),_._v(" 算法架构图解")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://marksuper.xyz/picture/file/leetcode/suanfatixi.jpeg",alt:"suanfatixi"}})]),_._v(" "),v("h2",{attrs:{id:"算法入门"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算法入门"}},[_._v("#")]),_._v(" 算法入门")]),_._v(" "),v("p",[_._v("当我们谈论算法时，我们谈论的是解决问题的方法和步骤。在计算机科学中，算法是一系列明确定义的指令，用于执行特定任务或解决特定问题。算法在各个领域都起着至关重要的作用，从数据处理到人工智能，无处不在。")]),_._v(" "),v("p",[_._v("一、算法简介\n1.1 什么是算法\n算法可以被视为一种计算过程，通过一系列有序的步骤来执行特定的任务。它是一种数学概念，通常由一组输入、输出和执行步骤组成。一个好的算法应该是正确的、高效的，并且适用于特定问题。")]),_._v(" "),v("p",[_._v("1.2 算法的特性\n明确定义： 算法应该具有明确的步骤，对于任何给定的输入，都应该产生确定的输出。\n有限性： 算法必须在有限步骤内结束，不会无限循环或无法终止。\n输入： 算法可以有零个或多个输入，这些输入是用来执行特定任务的数据。\n输出： 算法应该产生一个或多个输出，以表示完成任务的结果。\n1.3 算法的度量指标\n时间复杂性： 衡量算法执行所需时间的指标，通常用大O表示法来表示。较低的时间复杂性通常意味着更高的性能。O(f(n))：n为问题的规模，f(n)为执行次数的系数为1的最小阶，O(f(n))表示时间复杂度。\n空间复杂性： 衡量算法在执行过程中所需内存空间的指标。与时间复杂性类似，我们希望尽量减少算法的空间占用。表示与世界复杂度一样。")]),_._v(" "),v("p",[_._v("i++ 和 ++i 有什么区别")]),_._v(" "),v("p",[v("code",[_._v("++i")]),_._v(" 先使 i 先自加一，然后返回 i")]),_._v(" "),v("p",[_._v("i = 1;\nj = ++i;\n(i is 2, j is 2)")]),_._v(" "),v("p",[v("code",[_._v("i++")]),_._v(" 先返回 i，再使 i 自加一，")]),_._v(" "),v("p",[_._v("i = 1;\nj = i++;\n(i is 2, j is 1)")]),_._v(" "),v("h1",{attrs:{id:"二、算法知识框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、算法知识框架"}},[_._v("#")]),_._v(" 二、算法知识框架")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("线性数据结构")]),_._v("：数组、链表、栈、队列、哈希表，元素之间是一对一的顺序关系。")]),_._v(" "),v("li",[v("strong",[_._v("非线性数据结构")]),_._v("：树、堆、图、哈希表。")])]),_._v(" "),v("p",[_._v("非线性数据结构可以进一步划分为树形结构和网状结构。")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("树形结构")]),_._v("：树、堆、哈希表，元素之间是一对多的关系。")]),_._v(" "),v("li",[v("strong",[_._v("网状结构")]),_._v("：图，元素之间是多对多的关系。")])]),_._v(" "),v("p",[_._v("值得说明的是，"),v("strong",[_._v("所有数据结构都是基于数组、链表或二者的组合实现的")]),_._v("。例如，栈和队列既可以使用数组实现，也可以使用链表实现；而哈希表的实现可能同时包含数组和链表。")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("基于数组可实现")]),_._v("：栈、队列、哈希表、树、堆、图、矩阵、张量（维度  的数组）等。")]),_._v(" "),v("li",[v("strong",[_._v("基于链表可实现")]),_._v("：栈、队列、哈希表、树、堆、图等。")])]),_._v(" "),v("p",[_._v("链表在初始化后，仍可以在程序运行过程中对其长度进行调整，因此也称“动态数据结构”。数组在初始化后长度不可变，因此也称“静态数据结构”。值得注意的是，数组可通过重新分配内存实现长度变化，从而具备一定的“动态性”。")]),_._v(" "),v("h2",{attrs:{id:"_1-线性结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-线性结构"}},[_._v("#")]),_._v(" 1.线性结构")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("数组")])]),_._v(" "),v("li",[v("p",[_._v("链表")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("单向链表")])]),_._v(" "),v("li",[v("p",[_._v("环形链表")])]),_._v(" "),v("li",[v("p",[_._v("双向链表")])])])]),_._v(" "),v("li",[v("p",[_._v("栈")])]),_._v(" "),v("li",[v("p",[_._v("队列")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("单向队列")])]),_._v(" "),v("li",[v("p",[_._v("双向队列")])])])]),_._v(" "),v("li",[v("p",[_._v("哈希表")])])]),_._v(" "),v("h2",{attrs:{id:"_2-非线性结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-非线性结构"}},[_._v("#")]),_._v(" 2.非线性结构")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("二叉树")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("完美二叉树")])]),_._v(" "),v("li",[v("p",[_._v("完全二叉树")])]),_._v(" "),v("li",[v("p",[_._v("完满二叉树")])]),_._v(" "),v("li",[v("p",[_._v("平衡二叉树")])]),_._v(" "),v("li",[v("p",[_._v("二叉搜索树")])])])]),_._v(" "),v("li",[v("p",[_._v("多叉树")])]),_._v(" "),v("li",[v("p",[_._v("堆")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("大顶堆")])]),_._v(" "),v("li",[v("p",[_._v("小顶堆")])])])]),_._v(" "),v("li",[v("p",[_._v("图")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("邻接矩阵")])]),_._v(" "),v("li",[v("p",[_._v("邻接表")])])])])]),_._v(" "),v("h1",{attrs:{id:"算法系列架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算法系列架构"}},[_._v("#")]),_._v(" 算法系列架构")]),_._v(" "),v("h2",{attrs:{id:"基本算法思想"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本算法思想"}},[_._v("#")]),_._v(" 基本算法思想")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("贪心算法")])]),_._v(" "),v("li",[v("p",[_._v("分治算法")])]),_._v(" "),v("li",[v("p",[_._v("动态规划算法")])]),_._v(" "),v("li",[v("p",[_._v("回溯算法")])]),_._v(" "),v("li",[v("p",[_._v("枚举算法")])]),_._v(" "),v("li",[v("p",[_._v("递归算法")])])]),_._v(" "),v("h2",{attrs:{id:"常见经典算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见经典算法"}},[_._v("#")]),_._v(" 常见经典算法")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("排序")])]),_._v(" "),v("li",[v("p",[_._v("搜索")])]),_._v(" "),v("li",[v("p",[_._v("查找")])]),_._v(" "),v("li",[v("p",[_._v("字符串匹配")])]),_._v(" "),v("li",[v("p",[_._v("其他")])])]),_._v(" "),v("h1",{attrs:{id:""}},[v("a",{staticClass:"header-anchor",attrs:{href:"#"}},[_._v("#")])]),_._v(" "),v("p")])}),[],!1,null,null,null);v.default=a.exports}}]);