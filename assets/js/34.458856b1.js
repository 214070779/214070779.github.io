(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{379:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"内存对齐的原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存对齐的原因"}},[s._v("#")]),s._v(" 内存对齐的原因")]),s._v(" "),t("p",[s._v("平台原因(移植原因)：不是所有的硬件平台都能访问任意地址上的任意数据的；某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。")]),s._v(" "),t("p",[s._v("性能原因：数据结构(尤其是栈)应该尽可能地在自然边界上对齐。原因在于，为了访问未对齐的内存，处理器需要作两次内存访问；而对齐的内存访问仅需要一次访问。")]),s._v(" "),t("p",[s._v("假如没有内存对齐机制，数据可以任意存放，现在一个int变量存放在从地址1开始的联系四个字节地址中，该处理器去取数据时，要先从0地址开始读取第一个4字节块,剔除不想要的字节（0地址）,然后从地址4开始读取下一个4字节块,同样剔除不要的数据（5，6，7地址）,最后留下的两块数据合并放入寄存器。这需要做很多工作。\n现在有了内存对齐的，int类型数据只能存放在按照对齐规则的内存中，比如说0地址开始的内存。那么现在该处理器在取数据时一次性就能将数据读出来了，而且不需要做额外的操作，提高了效率。")]),s._v(" "),t("h2",{attrs:{id:"内存对齐的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存对齐的原理"}},[s._v("#")]),s._v(" 内存对齐的原理")]),s._v(" "),t("p",[s._v("内存在进行IO的时候，一次操作取的就是64个bit。")]),s._v(" "),t("p",[s._v("所以，内存对齐最最底层的原因是内存的IO是以64bit为单位进行的。 对于64位数据宽度的内存，假如cpu也是64位的cpu（现在的计算机基本都是这样的），每次内存IO获取数据都是从同行同列的8个chip中各自读取一个字节拼起来的。从内存的0地址开始，0-63bit的数据可以一次IO读取出来，64-127bit的数据也可以一次读取出来。CPU和内存IO的硬件限制导致没办法一次跨在两个数据宽度中间进行IO。")]),s._v(" "),t("p",[s._v("假如对于一个c的程序员，如果把一个bigint（64位）地址写到的0x0001开始，而不是0x0000开始，那么数据并没有存在同一行列地址上。因此cpu必须得让内存工作两次才能取到完整的数据。效率自然就很低。这下你有没有彻底理解了内存对齐？")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("扩展1：如果不强制对地址进行操作，仅仅只是简单用c定义一个结构体，编译和链接器会自动替开发者对齐内存的。尽量帮你保证一个变量不跨列寻址。")])]),s._v(" "),t("li",[t("p",[s._v("扩展2：其实在内存硬件层上，还有操作系统层。操作系统还管理了CPU的一级、二级、三级缓存。实际中不一定每次IO都从内存出，如果你的数据局部性足够好，那么很有可能只需要少量的内存IO，大部分都是更为高效的高速缓存IO。但是高速缓存和内存一样，也是要考虑对齐的。")])])]),s._v(" "),t("h2",{attrs:{id:"内存对齐规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存对齐规则"}},[s._v("#")]),s._v(" 内存对齐规则")]),s._v(" "),t("ul",[t("li",[s._v("基本类型的对齐值就是其sizeof值;")]),s._v(" "),t("li",[s._v("数据成员对齐规则：结构(struct)(或联合(union))的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员的对齐按照#pragma pack指定的数值和这个数据成员自身长度中，比较小的那个进行;")]),s._v(" "),t("li",[s._v("结构(或联合)的整体对齐规则：在数据成员完成各自对齐之后，结构(或联合)本身也要进行对齐，对齐将按照#pragma pack指定的数值和结构(或联合)最大数据成员长度中，比较小的那个进行;")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("点击查看")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2020.05.12 公众号：C语言与CPP编程")]),s._v("\n#include"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("stdio"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("h"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nstruct\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    int i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    char c1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    char c2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("Test1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nstruct"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    char c1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    int i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    char c2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("Test2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nstruct"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    char c1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    char c2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    int i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("Test3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nint "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出8")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出12")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sizeof")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出8")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])])]),s._v(" "),t("p",[s._v("默认#pragma pack(4)，且结构体中最长的数据类型为4个字节，所以有效对齐单位为4字节，下面根据上面所说的规则以第二个结构体来分析其内存布局：首先使用规则1，对成员变量进行对齐：")]),s._v(" "),t("p",[s._v("sizeof(c1) = 1 <= 4(有效对齐位)，按照1字节对齐，占用第0单元；\nsizeof(i) = 4 <= 4(有效对齐位)，相对于结构体首地址的偏移要为4的倍数，占用第4，5，6，7单元；\nsizeof(c2) = 1 <= 4(有效对齐位)，相对于结构体首地址的偏移要为1的倍数，占用第8单元；\n然后使用规则2，对结构体整体进行对齐：")]),s._v(" "),t("p",[s._v("第二个结构体中变量i占用内存最大占4字节，而有效对齐单位也为4字节，两者较小值就是4字节。因此整体也是按照4字节对齐。由规则1得到s2占9个字节，此处再按照规则2进行整体的4字节对齐，所以整个结构体占用12个字节。")]),s._v(" "),t("p",[s._v("根据上面的分析，不难得出上面例子三个结构体的内存布局如下：")]),s._v(" "),t("img",{attrs:{src:s.$withBase("/picture/1.jpeg")}}),s._v("\n## 一个OC对象占用多少内存\n"),t("p",[s._v("系统分配了16个字节给NSObject对象（通过malloc_size函数获得）\n但NSObject对象内部只使用了8个字节的空间（64bit环境下，可以通过class_getInstanceSize函数获得）")]),s._v(" "),t("h2",{attrs:{id:"oc对象的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#oc对象的分类"}},[s._v("#")]),s._v(" OC对象的分类")]),s._v(" "),t("p",[s._v("OC对象 可以分为3种:")]),s._v(" "),t("ol",[t("li",[s._v("instance对象 (实例对象)")]),s._v(" "),t("li",[s._v("class对象 (类对象)")]),s._v(" "),t("li",[s._v("meta-class对象 (元类对象)")])]),s._v(" "),t("h2",{attrs:{id:"instance对象-实例对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#instance对象-实例对象"}},[s._v("#")]),s._v(" instance对象 (实例对象)")]),s._v(" "),t("p",[s._v("instance对象就是通过类alloc出来的对象，每次调用alloc都会产生新的instance对象")]),s._v(" "),t("p",[s._v("instance对象在内存中存储的信息包括\n-isa指针\n-其他成员变量")]),s._v(" "),t("h2",{attrs:{id:"class对象-类对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class对象-类对象"}},[s._v("#")]),s._v(" Class对象 (类对象)")]),s._v(" "),t("p",[s._v("我们平时说的类,其实也是对象,称为类对象, 每个类在内存中有且只有一个class对象")]),s._v(" "),t("img",{attrs:{src:s.$withBase("/picture/16.png")}}),s._v(" "),t("h3",{attrs:{id:"cache-t结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-t结构"}},[s._v("#")]),s._v(" cache_t结构")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("struct cache_t "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    struct bucket_t "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("_buckets"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    mask_t _mask"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    mask_t _occupied"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nstruct bucket_t "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// IMP-first is better for arm64e ptrauth and no worse for arm64.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// SEL-first is better for armv7* and i386 and x86_64.")]),s._v("\n#"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __arm64__\n    MethodCacheIMP _imp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    cache_key_t _key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    cache_key_t _key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    MethodCacheIMP _imp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n#endif\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    inline cache_key_t "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("key")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" _key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    inline "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IMP")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("imp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IMP")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("_imp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    inline "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("cache_key_t newKey")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" _key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newKey"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    inline "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setImp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IMP")]),s._v(" newImp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" _imp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newImp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cache_key_t newKey"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IMP")]),s._v(" newImp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("以上bucket_t的属性和方法中可以看出它应该与imp有联系——事实上bucket_t作为一个桶，里面是用来装imp方法实现以及它的key")]),s._v(" "),t("p",[s._v("LRU算法")]),s._v(" "),t("p",[s._v("也就是最近最少使用策略——这个策略的核心思想就是先淘汰最近最少使用的内容，在方法缓存中也用到了这种算法")]),s._v(" "),t("h2",{attrs:{id:"meta-class-元类对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#meta-class-元类对象"}},[s._v("#")]),s._v(" meta-Class 元类对象")]),s._v(" "),t("p",[s._v("每个类在内存中有且只有一个meta-class对象")]),s._v(" "),t("p",[s._v("// 将类对象当做参数传入，获得元类对象\nClass objectMetaClass = object_getClass(objectClass5);")]),s._v(" "),t("p",[s._v("objectMetaClass是NSObject的meta-class对象（元类对象）")]),s._v(" "),t("p",[s._v("每个类在内存中有且只有一个meta-class对象")]),s._v(" "),t("p",[s._v("meta-class对象和class对象的内存结构是一样的，但是用途不一样，在内存中存储的信息主要包括")]),s._v(" "),t("ul",[t("li",[s._v("isa指针")]),s._v(" "),t("li",[s._v("superclass指针")]),s._v(" "),t("li",[s._v("类的类方法信息（class method）")])]),s._v(" "),t("h3",{attrs:{id:"为什么要设计metaclass"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要设计metaclass"}},[s._v("#")]),s._v(" 为什么要设计metaclass?")]),s._v(" "),t("p",[s._v("先说结论: 为了更好的复用传递消息.metaclass只是需要实现复用消息传递为目的工具.而Objective-C所有的类默认都是同一个MetaClass(通过isa指针最终指向metaclass). 因为Objective-C的特性基本上是照搬的Smalltalk,Smalltalk中的MetaClass的设计是Smalltalk-80加入的.所以Objective-C也就有了metaclass的设计.")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.4n42h8e5u8a0.webp",alt:"继承关系"}})]),s._v(" "),t("h2",{attrs:{id:"isa指针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#isa指针"}},[s._v("#")]),s._v(" isa指针")]),s._v(" "),t("p",[s._v("instance的isa指向class\n当调用对象方法时，通过instance的isa找到class，最后找到对象方法的实现进行调用")]),s._v(" "),t("p",[s._v("class的isa指向meta-class\n当调用类方法时，通过class的isa找到meta-class，最后找到类方法的实现进行调用")]),s._v(" "),t("h2",{attrs:{id:"superclass-指针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#superclass-指针"}},[s._v("#")]),s._v(" superClass 指针")]),s._v(" "),t("p",[s._v("class对象的superclass指针")]),s._v(" "),t("p",[s._v("@interface Student: Person")]),s._v(" "),t("p",[s._v("@interfce  Person: NSObject")]),s._v(" "),t("p",[s._v("当Student的instance对象要调用Person的对象方法时，会先通过isa找到Student的class，\n然后通过superclass找到Person的class，最后找到对象方法的实现进行调用")]),s._v(" "),t("p",[s._v("meta-class对象的superclass指针")]),s._v(" "),t("p",[s._v("当Student的class要调用Person的类方法时，会先通过isa找到Student的meta-class，\n然后通过superclass找到Person的meta-class，最后找到类方法的实现进行调用")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),t("p",[s._v("类对象存储实例方法列表等信息")]),s._v(" "),t("p",[s._v("元类对象存储类方法列表等信息")]),s._v(" "),t("h3",{attrs:{id:"对像方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对像方法"}},[s._v("#")]),s._v(" 对像方法")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("实例对象(instance)要调用对象方法1.通过isa指针 -> 找到自己所属的类对象 -> 查找并调用方法")])]),s._v(" "),t("li",[t("p",[s._v("如果在自己的类对象没有找到方法，通过类对象的superclass指针 -> 找到父类的类对象 ->查找并调用方法")])]),s._v(" "),t("li",[t("p",[s._v("如果还没有找到，就通过superclass指针一直通过继承关系往上找，直到基类的类对象，如果还是没有找到，抛出异常")])])]),s._v(" "),t("h3",{attrs:{id:"类方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类方法"}},[s._v("#")]),s._v(" 类方法")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("类对象通过isa指针 -> 找到自己的元类对象 -> 查找并调用方法")])]),s._v(" "),t("li",[t("p",[s._v("如果没有找到，通过元类对象的superclass指针 -> 找到父类的元类对象 -> 查找并且调用方法")])]),s._v(" "),t("li",[t("p",[s._v("如果还是没有找到，根据继承体系，通过元类对象的superclass指针一直找到基类的元类对象，查找并调用方法")])]),s._v(" "),t("li",[t("p",[s._v("如果基类的元类对象也找不到该类方法，会通过基类元类对象的superclass指针找到基类的类对象，查找有没有同名的对象方法，找到就调用，没有就抛出异常")])])])]),s._v(" "),t("p",[s._v("isa的走向有以下几点说明：")]),s._v(" "),t("p",[s._v("实例对象（Instance of Subclass）的 isa 指向 类（class）")]),s._v(" "),t("p",[s._v("类对象（class） isa 指向 元类（Meta class）")]),s._v(" "),t("p",[s._v("元类（Meta class）的isa 指向 根元类（Root metal class）")]),s._v(" "),t("p",[s._v("根元类（Root metal class） 的isa 指向它自己本身，形成闭环，这里的根元类就是NSObject")]),s._v(" "),t("h3",{attrs:{id:"superclass走位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#superclass走位"}},[s._v("#")]),s._v(" superclass走位")]),s._v(" "),t("p",[s._v("superclass（即继承关系）的走向也有以下几点说明：")]),s._v(" "),t("p",[s._v("类 之间 的继承关系：")]),s._v(" "),t("p",[s._v("类（subClass） 继承自 父类（superClass）")]),s._v(" "),t("p",[s._v("父类（superClass） 继承自 根类（RootClass），此时的根类是指NSObject")]),s._v(" "),t("p",[s._v("根类 继承自 nil，所以根类即NSObject可以理解为万物起源，即无中生有")]),s._v(" "),t("p",[s._v("元类也存在继承，元类之间的继承关系如下：")]),s._v(" "),t("p",[s._v("子类的元类（metal SubClass） 继承自 父类的元类（metal SuperClass）")]),s._v(" "),t("p",[s._v("父类的元类（metal SuperClass） 继承自 根元类（Root metal Class")]),s._v(" "),t("p",[s._v("根元类（Root metal Class） 继承于 根类（Root class），此时的根类是指NSObject")]),s._v(" "),t("p",[t("strong",[s._v("举例")])]),s._v(" "),t("p",[s._v("NyanCat *cat = [[NyanCat alloc] init];\n[cat nyan1];")]),s._v(" "),t("p",[s._v("向cat (instance) 发送消息nyan1时，运行时会通过isa指针查找到NyanCat(Class)，这里保存着本类中定义的实例方法的指针。")]),s._v(" "),t("p",[s._v("[NyanCat nyan2];")]),s._v(" "),t("p",[s._v("向NyanCat(Class)发送消息nyan2时，运行时会通过isa查找到NyanCat(meta-class)，这里保存着本类中定义的类方法的指针。")]),s._v(" "),t("img",{attrs:{src:s.$withBase("/picture/14.png")}}),s._v(" "),t("p",[t("strong",[s._v("类的继承")])]),s._v(" "),t("p",[s._v("在_class_t里面，第二个成员是superclass，很明显这个指针指向了它的父类。运行时可以通过isa和superclass获取一个类在继承树上的完整信息。")]),s._v(" "),t("p",[s._v("为了说明方便，这里把上面的例子稍微改一下：NyanCat : Cat : NSObject 这样一个继承树，画出图来就是这样子的")]),s._v(" "),t("img",{attrs:{src:s.$withBase("/picture/15.png")}})])}),[],!1,null,null,null);t.default=e.exports}}]);