(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{389:function(s,n,a){"use strict";a.r(n);var e=a(4),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"一-runtime简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-runtime简介"}},[s._v("#")]),s._v(" 一. RunTime简介")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),n("p",[s._v("RunTime简称运行时。OC就是运行时机制，也就是在运行时候的一些机制，其中最主要的是消息机制。\n对于C语言，函数的调用在编译的时候会决定调用哪个函数，如果调用未实现的函数就会报错。对于OC语言，属于动态调用过程，在编译的时候并不能决定真正调用哪个函数，只有在真正运行的时候才会根据函数的名称找到对应的函数来调用。在编译阶段，OC可以调用任何函数，即使这个函数并未实现，只要声明过就不会报错。")])]),s._v(" "),n("h2",{attrs:{id:"runtime消息机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#runtime消息机制"}},[s._v("#")]),s._v(" RunTime消息机制")]),s._v(" "),n("p",[s._v("消息机制是运行时里面最重要的机制，OC中任何方法的调用，本质都是发送消息。使用运行时，发送消息需要导入框架并且xcode5之后，苹果不建议使用底层方法，如果想要使用运行时，需要关闭严格检查objc_msgSend的调用，BuildSetting->搜索msg 改为NO。")]),s._v(" "),n("h3",{attrs:{id:"方法的本质是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法的本质是什么"}},[s._v("#")]),s._v(" 方法的本质是什么")]),s._v(" "),n("p",[s._v("方法的本质是发送消息objc_msgSend，即寻找IMP的过程")]),s._v(" "),n("p",[s._v("发送消息会有以下⼏个流程：")]),s._v(" "),n("ul",[n("li",[s._v("快速查找流程——通过汇编objc_msgSend查找缓存cache_t是否有imp实现")]),s._v(" "),n("li",[s._v("慢速查找流程——通过C++中lookUpImpOrForward递归查找当前类和父类的rw中methodlist的方法")]),s._v(" "),n("li",[s._v("动态方法解析——通过调用resolveInstanceMethod和resolveClassMethod来动态方法决议——实现消息动态处理")]),s._v(" "),n("li",[s._v("快速转发流程——通过CoreFoundation来触发消息转发流程，forwardingTargetForSelector实现快速转发，由其他对象来实现处理方法")]),s._v(" "),n("li",[s._v("慢速转发流程——先调用methodSignatureForSelector获取到方法的签名，生成对应的invocation；再通过forwardInvocation来进行处理")]),s._v(" "),n("li",[s._v("以上流程均无法挽救就崩溃并报错")])]),s._v(" "),n("h3",{attrs:{id:"sel和imp的关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sel和imp的关系"}},[s._v("#")]),s._v(" SEL和IMP的关系")]),s._v(" "),n("p",[s._v("SEL是方法编号，也是方法名，在dyld加载镜像到内存时，通过_read_image方法加载到内存的表中了\nIMP是函数实现指针，找IMP就是找函数实现的过程")]),s._v(" "),n("p",[s._v("SEL和IMP的关系就可以解释为：")]),s._v(" "),n("ul",[n("li",[s._v("SEL就相当于书本的⽬录标题")]),s._v(" "),n("li",[s._v("IMP就是书本的⻚码")]),s._v(" "),n("li",[s._v("函数就是具体页码对应的内容")])]),s._v(" "),n("h3",{attrs:{id:"能否向运行时创建的类中添加实例变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#能否向运行时创建的类中添加实例变量"}},[s._v("#")]),s._v(" 能否向运⾏时创建的类中添加实例变量")]),s._v(" "),n("p",[s._v("具体情况具体分析：")]),s._v(" "),n("p",[s._v("编译好的类不能添加实例变量\n运行时创建的类可以添加实例变量，但若已注册到内存中就不行了")]),s._v(" "),n("p",[s._v("原因：")]),s._v(" "),n("p",[s._v("编译好的实例变量存储的位置在ro，而ro是在编译时就已经确定了的\n⼀旦编译完成，内存结构就完全确定就⽆法修改\n只能修改rw中的方法或者可以通过关联对象的方式来添加属性")]),s._v(" "),n("h2",{attrs:{id:"利用runtime-api创建对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利用runtime-api创建对象"}},[s._v("#")]),s._v(" 利用runtime-API创建对象")]),s._v(" "),n("h3",{attrs:{id:"动态创建类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态创建类"}},[s._v("#")]),s._v(" 动态创建类")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n *创建类\n *\n *superClass: 父类，传Nil会创建一个新的根类\n *name: 类名\n *extraBytes: 额外的内存空间，一般传0\n *return:返回新类，创建失败返回Nil，如果类名已经存在，则创建失败\n */\nClass FXPerson = objc_allocateClassPair([NSObject class], "LGPerson", 0);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])]),s._v(" "),n("h3",{attrs:{id:"添加成员变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加成员变量"}},[s._v("#")]),s._v(" 添加成员变量")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n*添加成员变量\n*这个函数只能在objc_allocateClassPair和objc_registerClassPair之间调用。不支持向现有类添加一个实例变量\n*这个类不能是元类，不支持在元类中添加一个实例变量\n*实例变量的最小对齐为1 << align，实例变量的最小对齐依赖于ivar的类型和机器架构。对于任何指针类型的变量，请通过log2(sizeof(pointer_type))\n*\n*cls 往哪个类添加\n*name 添加的名字\n*size 大小\n*alignment 对齐处理方式\n*types 签名\n*/\nclass_addIvar(FXPerson, "fxName", sizeof(NSString *), log2(sizeof(NSString *)), "@");\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])])]),s._v(" "),n("h3",{attrs:{id:"注册到内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注册到内存"}},[s._v("#")]),s._v(" 注册到内存")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/**\n *往内存注册类\n *\n * cls 要注册的类\n */\n objc_registerClassPair(FXPerson);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])]),s._v(" "),n("h3",{attrs:{id:"添加属性变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加属性变量"}},[s._v("#")]),s._v(" 添加属性变量")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/**\n*往类里面添加属性\n*\n*cls 要添加属性的类\n*name 属性名字\n*attributes 属性的属性数组。\n*attriCount 属性中属性的数量。\n*/\nclass_addProperty(targetClass, propertyName, attrs, 4);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])]),s._v(" "),n("h3",{attrs:{id:"添加方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加方法"}},[s._v("#")]),s._v(" 添加方法")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('/**\n *往类里面添加方法\n *\n *cls 要添加方法的类\n *sel 方法编号\n *imp 函数实现指针\n *types 签名\n */\nclass_addMethod(FXPerson, @selector(setHobby), (IMP)fxSetter, "v@:@");\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])]),s._v(" "),n("h3",{attrs:{id:"整体使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#整体使用"}},[s._v("#")]),s._v(" 整体使用")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// hobby的setter-IMP\nvoid fxSetter(NSString *value) {\n    printf("%s/n",__func__);\n}\n\n// hobby的getter-IMP\nNSString *fxHobby() {\n    return @"iOS";\n}\n\n// 添加属性变量的封装方法\nvoid fx_class_addProperty(Class targetClass, const char *propertyName) {\n    objc_property_attribute_t type = { "T", [[NSString stringWithFormat:@"@\\"%@\\"",NSStringFromClass([NSString class])] UTF8String] }; //type\n    objc_property_attribute_t ownership0 = { "C", "" }; // C = copy\n    objc_property_attribute_t ownership = { "N", "" }; //N = nonatomic\n    objc_property_attribute_t backingivar  = { "V", [NSString stringWithFormat:@"_%@",[NSString stringWithCString:propertyName encoding:NSUTF8StringEncoding]].UTF8String };  //variable name\n    objc_property_attribute_t attrs[] = {type, ownership0, ownership, backingivar};\n    class_addProperty(targetClass, propertyName, attrs, 4);\n}\n\n// 打印属性变量的封装方法\nvoid fx_printerProperty(Class targetClass){\n    unsigned int outCount, i;\n    objc_property_t *properties = class_copyPropertyList(targetClass, &outCount);\n    for (i = 0; i < outCount; i++) {\n        objc_property_t property = properties[i];\n        fprintf(stdout, "%s %s\\n", property_getName(property), property_getAttributes(property));\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        // 动态创建类\n        Class FXPerson = objc_allocateClassPair([NSObject class], "FXPerson", 0);\n        // 添加成员变量\n        class_addIvar(FXPerson, "name", sizeof(NSString *), log2(sizeof(NSString *)), "@");\n        // 注册到内存\n        objc_registerClassPair(FXPerson);\n        // 添加属性变量\n        fx_class_addProperty(FXPerson, "hobby");\n        fx_printerProperty(FXPerson);\n        // 添加方法（为属性方法添加setter、getter方法）\n        class_addMethod(FXPerson, @selector(setHobby:), (IMP)fxSetter, "v@:@");\n        class_addMethod(FXPerson, @selector(hobby), (IMP)fxHobby, "@@:");\n\n        // 开始使用\n        id person = [FXPerson alloc];\n        [person setValue:@"Felix" forKey:@"name"];\n        NSLog(@"FXPerson的名字是：%@ 爱好是：%@", [person valueForKey:@"name"], [person valueForKey:@"hobby"]);\n    }\n    return 0;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br")])])]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),n("p",[s._v("注意事项")]),s._v(" "),n("ul",[n("li",[s._v("记得导入<objc/runtime.h>")]),s._v(" "),n("li",[s._v("添加成员变量class_addIvar必须在objc_registerClassPair前，因为注册到内存时ro已经确定了，不能再往ivars添加（同第四个面试题）")]),s._v(" "),n("li",[s._v("添加属性变量class_addProperty可以在注册内存前后，因为是往rw中添加的")]),s._v(" "),n("li",[s._v("class_addProperty中“属性的属性”——nonatomic/copy是根据属性的类型变化而变化的")]),s._v(" "),n("li",[s._v("class_addProperty不会自动生成setter和getter方法，因此直接调用KVC会崩溃")])]),s._v(" "),n("p",[s._v("不只可以通过KVC打印来检验，也可以下断点查看ro、rw的结构来检验")])]),s._v(" "),n("h2",{attrs:{id:"关联对象分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关联对象分析"}},[s._v("#")]),s._v(" 关联对象分析")]),s._v(" "),n("h3",{attrs:{id:"_1-分类直接添加属性的后果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-分类直接添加属性的后果"}},[s._v("#")]),s._v(" 1.分类直接添加属性的后果")]),s._v(" "),n("p",[s._v("编译会出现警告：没有setter方法和getter方法")]),s._v(" "),n("p",[s._v("运行会报错：-[FXPerson setName:]: unrecognized selector sent to instance 0x100f61180'")]),s._v(" "),n("h3",{attrs:{id:"_2-为什么不能直接添加属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么不能直接添加属性"}},[s._v("#")]),s._v(" 2.为什么不能直接添加属性")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("struct category_t {\n    const char *name;\n    classref_t cls;\n    struct method_list_t *instanceMethods;\n    struct method_list_t *classMethods;\n    struct protocol_list_t *protocols;\n    struct property_list_t *instanceProperties;\n    // Fields below this point are not always present on disk.\n    struct property_list_t *_classProperties;\n    ...\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])])]),s._v(" "),n("p",[s._v("里面虽然可以添加属性变量，但是这些properties并不会自动生成Ivar，也就是不会有 @synthesize的作用，dyld加载期间，这些分类会被加载并patch到相应的类中。这是一个动态过程，Ivar不能动态添加")]),s._v(" "),n("h3",{attrs:{id:"_3-解决方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-解决方案"}},[s._v("#")]),s._v(" 3.解决方案")]),s._v(" "),n("p",[s._v("手动实现setter、getter方法，关联对象")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('- (void)setName:(NSString *)name {\n    /**\n    参数一：id object : 给哪个对象添加属性，这里要给自己添加属性，用self。\n    参数二：void * == id key : 属性名，根据key获取关联对象的属性的值，在objc_getAssociatedObject中通过次key获得属性的值并返回。\n    参数三：id value : 关联的值，也就是set方法传入的值给属性去保存。\n    参数四：objc_AssociationPolicy policy : 策略，属性以什么形式保存。\n    */\n    objc_setAssociatedObject(self, @"name", name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n- (NSString *)name {\n    /**\n    参数一：id object : 获取哪个对象里面的关联的属性。\n    参数二：void * == id key : 什么属性，与objc_setAssociatedObject中的key相对应，即通过key值取出value。\n    */\n    return objc_getAssociatedObject(self, @"name");\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])])]),s._v(" "),n("h3",{attrs:{id:"关联对象原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关联对象原理"}},[s._v("#")]),s._v(" 关联对象原理")]),s._v(" "),n("p",[n("strong",[s._v("setter方法——objc_setAssociatedObject分析")])]),s._v(" "),n("p",[s._v("苹果设计接口时往往会加个中间层——即使底层实现逻辑发生变化也不会影响到对外接口")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy) {\n    _object_set_associative_reference(object, (void *)key, value, policy);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])]),s._v(" "),n("p",[s._v("跟进去看看_object_set_associative_reference实现")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('void _object_set_associative_reference(id object, void *key, id value, uintptr_t policy) {\n    // This code used to work when nil was passed for object and key. Some code\n    // probably relies on that to not crash. Check and handle it explicitly.\n    // rdar://problem/44094390\n    if (!object && !value) return;\n\n    assert(object);\n\n    if (object->getIsa()->forbidsAssociatedObjects())\n        _objc_fatal("objc_setAssociatedObject called on instance (%p) of class %s which does not allow associated objects", object, object_getClassName(object));\n\n    // retain the new value (if any) outside the lock.\n    // 在锁之外保留新值（如果有）。\n    ObjcAssociation old_association(0, nil);\n    // acquireValue会对retain和copy进行操作，\n    id new_value = value ? acquireValue(value, policy) : nil;\n    {\n        // 关联对象的管理类\n        AssociationsManager manager;\n        // 获取关联的 HashMap -> 存储当前关联对象\n        AssociationsHashMap &associations(manager.associations());\n        // 对当前的对象的地址做按位去反操作 - 就是 HashMap 的key (哈希函数)\n        disguised_ptr_t disguised_object = DISGUISE(object);\n        if (new_value) {\n            // break any existing association.\n            // 获取 AssociationsHashMap 的迭代器 - (对象的) 进行遍历\n            AssociationsHashMap::iterator i = associations.find(disguised_object);\n            if (i != associations.end()) {\n                // secondary table exists\n                ObjectAssociationMap *refs = i->second;\n                // 根据key去获取关联属性的迭代器\n                ObjectAssociationMap::iterator j = refs->find(key);\n                if (j != refs->end()) {\n                    old_association = j->second;\n                    // 替换设置新值\n                    j->second = ObjcAssociation(policy, new_value);\n                } else {\n                    // 到最后了 - 直接设置新值\n                    (*refs)[key] = ObjcAssociation(policy, new_value);\n                }\n            } else {\n                // create the new association (first time).\n                // 如果AssociationsHashMap从没有对象的关联信息表，\n                // 那么就创建一个map并通过传入的key把value存进去\n                ObjectAssociationMap *refs = new ObjectAssociationMap;\n                associations[disguised_object] = refs;\n                (*refs)[key] = ObjcAssociation(policy, new_value);\n                object->setHasAssociatedObjects();\n            }\n        } else {\n            // setting the association to nil breaks the association.\n            // 如果传入的value是nil，并且之前使用相同的key存储过关联对象，\n            // 那么就把这个关联的value移除（这也是为什么传入nil对象能够把对象的关联value移除）\n            AssociationsHashMap::iterator i = associations.find(disguised_object);\n            if (i !=  associations.end()) {\n                ObjectAssociationMap *refs = i->second;\n                ObjectAssociationMap::iterator j = refs->find(key);\n                if (j != refs->end()) {\n                    old_association = j->second;\n                    refs->erase(j);\n                }\n            }\n        }\n    }\n    // release the old value (outside of the lock).\n    // 最后把之前使用传入的这个key存储的关联的value释放（OBJC_ASSOCIATION_SETTER_RETAIN策略存储的）\n    if (old_association.hasValue()) ReleaseValue()(old_association);\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br")])])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("ObjcAssociation old_association(0, nil)处理传进来的值得到new_value")])]),s._v(" "),n("li",[n("p",[s._v("获取到管理所有关联对象的hashmap总表的管理者AssociationsManager，然后拿到hashmap总表AssociationsHashMap")])]),s._v(" "),n("li",[n("p",[s._v("DISGUISE(object)对关联对象的地址进行取反操作得到哈希表对应的下标index")])]),s._v(" "),n("li",[n("p",[s._v("如果new_value为空（即对属性赋值为nil）就直接找到相应的表进行删除")])]),s._v(" "),n("li",[n("p",[s._v("如果new_value不为空，就拿到总表的迭代器通过拿到的下标index进行遍历查找；如果找到管理对象的关联属性哈希map表，然后再通过key去遍历取值")])]),s._v(" "),n("li",[n("p",[s._v("如果取到了，就先把新值设置到key上，再将旧值释放掉")])]),s._v(" "),n("li",[n("p",[s._v("如果没取到，就直接将新值设置在key上\n还是不明白就LLDB断点调试呗\n"),n("img",{attrs:{src:"https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-10.58.24.4sz2s2pqh020.webp",alt:"Screenshot-2023-08-20-at-10"}})])])]),s._v(" "),n("p",[n("strong",[s._v("getter方法——objc_getAssociatedObject分析")])]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("id objc_getAssociatedObject(id object, const void *key) {\n    return _object_get_associative_reference(object, (void *)key);\n}\n\nid _object_get_associative_reference(id object, void *key) {\n    id value = nil;\n    uintptr_t policy = OBJC_ASSOCIATION_ASSIGN;\n    {\n        // 关联对象的管理类\n        AssociationsManager manager;\n        AssociationsHashMap &associations(manager.associations());\n        // 生成伪装地址。处理参数 object 地址\n        disguised_ptr_t disguised_object = DISGUISE(object);\n        // 所有对象的额迭代器\n        AssociationsHashMap::iterator i = associations.find(disguised_object);\n        if (i != associations.end()) {\n            ObjectAssociationMap *refs = i->second;\n            // 内部对象的迭代器\n            ObjectAssociationMap::iterator j = refs->find(key);\n            if (j != refs->end()) {\n                // 找到 - 把值和策略读取出来\n                ObjcAssociation &entry = j->second;\n                value = entry.value();\n                policy = entry.policy();\n                // OBJC_ASSOCIATION_GETTER_RETAIN - 就会持有一下\n                if (policy & OBJC_ASSOCIATION_GETTER_RETAIN) {\n                    objc_retain(value);\n                }\n            }\n        }\n    }\n    if (value && (policy & OBJC_ASSOCIATION_GETTER_AUTORELEASE)) {\n        objc_autorelease(value);\n    }\n    return value;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br")])])]),s._v(" "),n("p",[s._v("objc_getAssociatedObject是objc_setAssociatedObject的逆过程\n"),n("img",{attrs:{src:"https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-11.00.51.4vo5uw6kwco0.webp",alt:"Screenshot-2023-08-20-at-11"}})]),s._v(" "),n("h2",{attrs:{id:"weak置空原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#weak置空原理"}},[s._v("#")]),s._v(" weak置空原理")]),s._v(" "),n("p",[s._v("在weak一行打下断点运行项目")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("int main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        FXPerson *person = [[FXPerson alloc] init];\n        id __weak person = object;\n    }\n    return 0;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("Xcode菜单栏Debug->Debug Workflow->Always show Disassembly打上勾查看汇编——汇编代码会来到libobjc库的objc_initWeak")]),s._v(" "),n("h3",{attrs:{id:"weak创建过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#weak创建过程"}},[s._v("#")]),s._v(" weak创建过程")]),s._v(" "),n("p",[s._v("①objc_initWeak")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("location：表示__weak指针的地址（我们研究的就是__weak指针指向的内容怎么置为nil）")])]),s._v(" "),n("li",[n("p",[s._v("newObj：所引用的对象，即例子中的person")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("id\nobjc_initWeak(id *location, id newObj)\n{\n  if (!newObj) {\n      *location = nil;\n      return nil;\n  }\n\n  return storeWeak<DontHaveOld, DoHaveNew, DoCrashIfDeallocating>\n      (location, (objc_object*)newObj);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("②storeWeak\n- HaveOld：weak指针之前是否已经指向了一个弱引用\n- HaveNew：weak指针是否需要指向一个新引用\n- CrashIfDeallocating：如果被弱引用的对象正在析构，此时再弱引用该对象，是否应该crash\n\nstoreWeak最主要的两个逻辑点（源码太长，这里不贴了）\n\n![Screenshot-2023-08-20-at-11](https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-11.08.45.5nw0kjvmpxk0.webp)\n\n由于是第一次调用，所以走haveNew分支——获取到的是新的散列表SideTable，主要执行了weak_register_no_lock方法来进行插入\n\n③weak_register_no_lock\n\n- 主要进行了isTaggedPointer和deallocating条件判断\n- 将被弱引用对象所在的weak_table中的weak_entry_t哈希数组中取出对应的weak_entry_t\n- 如果weak_entry_t不存在，则会新建一个并插入\n- 如果存在就将指向被弱引用对象地址的指针referrer通过函数append_referrer插入到对应的weak_entry_t引用数组\n\n![Screenshot-2023-08-20-at-11](https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-11.09.56.39pwnzxcpig0.webp)\n\n④append_referrer\n\n找到弱引用对象的对应的weak_entry哈希数组中插入\n\n![Screenshot-2023-08-20-at-11](https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-11.10.48.6z8fee2t8ho0.webp)\n\n\n### weak创建流程\n![Screenshot-2023-08-20-at-11](https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-11.12.11.30k5gabiypu0.webp)\n\n\n### weak销毁过程\n\n由于弱引用在析构dealloc时自动置空，所以查看dealloc的底层实现并LLVM调试\n\n- _objc_rootDealloc->rootDealloc\n- rootDealloc->object_dispose\n- object_dispose->objc_destructInstance\n- objc_destructInstance->clearDeallocating\n- clearDeallocating->sidetable_clearDeallocating\n- sidetable_clearDeallocating3->table.refcnts.erase(it)\n\n\n### weak销毁流程\n![Screenshot-2023-08-20-at-11](https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-11.17.31.5vp4p8tbvjk0.webp)\n\n### 总结\n\n#### 创建流程小结：\n![Screenshot-2023-08-20-at-11](https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-11.12.11.30k5gabiypu0.webp)\nRuntime维护了一个弱引用表，将所有弱引用obj的指针地址都保存在obj对应的weak_entry_t中。\n\n- 创建时，先从找到全局散列表SideTables中对应的弱引用表weak_table\n- 在weak_table中被弱引用对象的referent,并创建或者插入对应的weak_entry_t\n- 然后append_referrer(entry, referrer)将我的新弱引⽤的对象加进去entry\n- 最后weak_entry_insert 把entry加⼊到我们的weak_table\n\n#### 销毁流程小结：\n![Screenshot-2023-08-20-at-11](https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-11.17.31.5vp4p8tbvjk0.webp)\n- 首先根据对象地址获取所有weak指针地址的数组\n- 然后遍历这个数组把对应的数据清空置为nil\n- 同时，将weak_entry_t移除出弱引用表weak_table。\n\n\n## Method Swizzing坑点\n\n### 1.黑魔法应用\n\n在日常开发中，再好的程序员都会犯错，比如数组越界\n\n因此为了避免数组越界这种问题，大神们开始玩起了黑魔法——method swizzing\n\n- 新建NSArray分类\n- 导入runtime头文件——<objc/runtime.h>\n- 写下新的方法\n- 在+load利用黑魔法交换方法\n\n::: details\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br")])]),n("p",[s._v('#import "NSArray+FX.h"\n#import <objc/runtime.h>')]),s._v(" "),n("p",[s._v("@implementation NSArray (FX)")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("(void)load {\n// 交换objectAtIndex方法\nMethod oriMethod1 = class_getInstanceMethod(self, @selector(objectAtIndex:));\nMethod swiMethod1 = class_getInstanceMethod(self, @selector(fx_objectAtIndex:));\nmethod_exchangeImplementations(oriMethod1, swiMethod1);")]),s._v(" "),n("p",[s._v("// 交换取下标方法\nMethod oriMethod2 = class_getInstanceMethod(self, @selector(objectAtIndexedSubscript:));\nMethod swiMethod2 = class_getInstanceMethod(self, @selector(fx_objectAtIndexedSubscript:));\nmethod_exchangeImplementations(oriMethod2, swiMethod2);\n}")])])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("(void)fx_objectAtIndex:(NSInteger)index {\nif (index > self.count - 1) {")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v('  NSLog(@"objectAtIndex————————数组越界");\n  return;\n')])])]),n("p",[s._v("}\nreturn [self fx_objectAtIndex:index];\n}")])]),s._v(" "),n("li",[n("p",[s._v("(void)fx_objectAtIndexedSubscript:(NSInteger)index {\nif (index > self.count - 1) {")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v('  NSLog(@"取下标————————数组越界");\n  return;\n')])])]),n("p",[s._v("}\nreturn [self fx_objectAtIndexedSubscript:index];\n}")])])]),s._v(" "),n("p",[s._v("@end")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(":::\n\n然而程序还是无情的崩了...\n\n其实在iOS中NSNumber、NSArray、NSDictionary等这些类都是类簇(Class Clusters)，一个NSArray的实现可能由多个类组成。所以如果想对NSArray进行方法交换，必须获取到其真身进行方法交换，直接对NSArray进行操作是无效的\n\n\n以下是NSArray和NSDictionary本类的类名\n\n![Screenshot-2023-08-20-at-19](https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-19.55.49.34bcbx9bkpg0.webp)\n\n这样就好办了，可以使用runtime取出本类\n\n![Screenshot-2023-08-20-at-19](https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-19.56.31.2tv7k7iuddq0.webp)\n\n#### 2.坑点一\n\n黑魔法最好写成单例，避免多次交换\n\n比如说添加了[NSArray load]代码，方法实现又交换回去了导致了崩溃\n\n![Screenshot-2023-08-20-at-19](https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-19.57.39.1aqyolkamgsg.webp)\n\n将+load方法改写成单例（虽然不常见，但也要避免）\n\n\n::: details\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("(void)load {\nstatic dispatch_once_t onceToken;\ndispatch_once(&onceToken, ^{")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v('  // 交换objectAtIndex方法\n  Method oriMethod1 = class_getInstanceMethod(objc_getClass("__NSArrayI"), @selector(objectAtIndex:));\n  Method swiMethod1 = class_getInstanceMethod(objc_getClass("__NSArrayI"), @selector(fx_objectAtIndex:));\n  method_exchangeImplementations(oriMethod1, swiMethod1);\n\n  // 交换取下标方法\n  Method oriMethod2 = class_getInstanceMethod(objc_getClass("__NSArrayI"), @selector(objectAtIndexedSubscript:));\n  Method swiMethod2 = class_getInstanceMethod(objc_getClass("__NSArrayI"), @selector(fx_objectAtIndexedSubscript:));\n  method_exchangeImplementations(oriMethod2, swiMethod2);\n')])])]),n("p",[s._v("});\n}")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(":::\n\n\n#### 坑点二\n\n①子类交换父类实现的方法\n\n- 父类FXPerson类中有-doInstance方法，子类FXSon类没有重写\n- FXSon类新建分类做了方法交换，新方法中调用旧方法\n- FXPerson类、FXSon类调用-doInstance\n\n![Screenshot-2023-08-20-at-20](https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-20.57.33.6oo27h3392g0.webp)\n\n子类打印出结果，而父类调用却崩溃了，为什么会这样呢？\n\n因为FXSon类交换方法时取得doInstance先在本类搜索方法，再往父类里查找，在FXFather中找到了方法实现就把它跟新方法进行交换了。可是新方法是在FXSon分类中的，FXFather找不到imp就unrecognized selector sent to instance 0x600002334250\n\n所以这种情况下应该只交换子类的方法，不动父类的方法\n\n::: details\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("(void)load {\nstatic dispatch_once_t onceToken;\ndispatch_once(&onceToken, ^{")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("  Method oriMethod = class_getInstanceMethod(self, @selector(doInstance));\n  Method swiMethod = class_getInstanceMethod(self, @selector(fx_doInstance));\n\n  BOOL didAddMethod = class_addMethod(self, @selector(doInstance), method_getImplementation(swiMethod), method_getTypeEncoding(swiMethod));\n  if (didAddMethod) {\n      class_replaceMethod(self, @selector(fx_doInstance), method_getImplementation(oriMethod), method_getTypeEncoding(oriMethod));\n  } else {\n      method_exchangeImplementations(oriMethod, swiMethod);\n  }\n")])])]),n("p",[s._v("});\n}")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(":::\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])])])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("通过class_addMethod给FXSon类添加方法（class_addMethod不会取代本类中已存在的实现，只会覆盖本类中继承父类的方法实现）")]),s._v(" "),n("ul",[n("li",[s._v("取得新方法swiMethod的实现和方法类型")]),s._v(" "),n("li",[s._v("往方法名@selector(fx_doInstance)添加方法")]),s._v(" "),n("li",[s._v("class_addMethod 把新方法实现放到旧方法名中，此刻调用doInstance就是调用fx_doInstance，但是调用fx_doInstance会崩溃")])])])]),s._v(" "),n("p",[s._v("根据didAddMethod判断是否添加成功")]),s._v(" "),n("ul",[n("li",[s._v("添加成功说明之前本类没有实现——class_replaceMethod替换方法")]),s._v(" "),n("li",[s._v("添加失败说明之前本类已有实现——method_exchangeImplementations交换方法")]),s._v(" "),n("li",[s._v("class_replaceMethod用doInstance方法实现替换掉fx_doInstance中的方法实现")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-21.28.13.6ijtcssfne.webp",alt:"Screenshot-2023-08-20-at-21"}})]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-21.51.50.1j7ewpgzysxs.webp",alt:"Screenshot-2023-08-20-at-21"}})]),s._v(" "),n("p",[s._v("②FXPerson类只写了方法声明，没有方法实现，却做了方法交换——会造成死循环")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-21.57.09.yn9d8781bg0.webp",alt:"Screenshot-2023-08-20-at-21"}})]),s._v(" "),n("p",[s._v("doInstance方法中添加了新的方法实现")]),s._v(" "),n("p",[s._v("fx_doInstance方法中想用旧的方法实现替代之前的方法实现，可是找不到doInstance实现，导致class_replaceMethod无效->在fx_doInstance中调用fx_doInstance就会死循环")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-21.57.52.1788nd6sgyv4.webp",alt:"Screenshot-2023-08-20-at-21"}})]),s._v(" "),n("p",[s._v("因此改变代码逻辑如下")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('+ (void)load {\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        Method oriMethod = class_getInstanceMethod(self, @selector(doInstance));\n        Method swiMethod = class_getInstanceMethod(self, @selector(fx_doInstance));\n\n        if (!oriMethod) {\n            class_addMethod(self, @selector(doInstance), method_getImplementation(swiMethod), method_getTypeEncoding(swiMethod));\n            method_setImplementation(swiMethod, imp_implementationWithBlock(^(id self, SEL _cmd) {\n                NSLog(@"方法未实现");\n            }));\n        }\n\n        BOOL didAddMethod = class_addMethod(self, @selector(doInstance), method_getImplementation(swiMethod), method_getTypeEncoding(swiMethod));\n        if (didAddMethod) {\n            class_replaceMethod(self, @selector(fx_doInstance), method_getImplementation(oriMethod), method_getTypeEncoding(oriMethod));\n        } else {\n            method_exchangeImplementations(oriMethod, swiMethod);\n        }\n    });\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])])]),s._v(" "),n("ul",[n("li",[s._v("未实现方法时用新的方法实现添加方法，此时调用doInstance就是调用fx_doInstance")]),s._v(" "),n("li",[s._v("由于此时fx_doInstance方法内部还是调用自己，用block修改fx_doInstance的实现，就可以断开死循环了")]),s._v(" "),n("li",[s._v("由于oriMethod（0x0），method_exchangeImplementations交换失败")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-21.59.32.707hbbinxos0.webp",alt:"Screenshot-2023-08-20-at-21"}})]),s._v(" "),n("p",[s._v("4.注意事项\n使用Method Swizzling有以下注意事项：")]),s._v(" "),n("ul",[n("li",[s._v("尽可能在+load方法中交换方法")]),s._v(" "),n("li",[s._v("最好使用单例保证只交换一次")]),s._v(" "),n("li",[s._v("自定义方法名不能产生冲突")]),s._v(" "),n("li",[s._v("对于系统方法要调用原始实现，避免对系统产生影响")]),s._v(" "),n("li",[s._v("做好注释（因为方法交换比较绕）")]),s._v(" "),n("li",[s._v("迫不得已情况下才去使用方法交换")])]),s._v(" "),n("p",[s._v("这是一份做好封装的Method Swizzling交换方法")]),s._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[s._v("点击查看")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('+ (void)FXMethodSwizzlingWithClass:(Class)cls oriSEL:(SEL)oriSEL swizzledSEL:(SEL)swizzledSEL {\n\n    if (!cls) NSLog(@"传入的交换类不能为空");\n\n    Method oriMethod = class_getInstanceMethod(cls, oriSEL);\n    Method swiMethod = class_getInstanceMethod(cls, swizzledSEL);\n\n    if (!oriMethod) {\n        class_addMethod(cls, oriSEL, method_getImplementation(swiMethod), method_getTypeEncoding(swiMethod));\n        method_setImplementation(swiMethod, imp_implementationWithBlock(^(id self, SEL _cmd) {\n            NSLog(@"方法未实现");\n        }));\n    }\n\n    BOOL didAddMethod = class_addMethod(cls, oriSEL, method_getImplementation(swiMethod), method_getTypeEncoding(swiMethod));\n    if (didAddMethod) {\n        class_replaceMethod(cls, swizzledSEL, method_getImplementation(oriMethod), method_getTypeEncoding(oriMethod));\n    } else {\n        method_exchangeImplementations(oriMethod, swiMethod);\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])])]),s._v(" "),n("p",[s._v("补充面试题一")]),s._v(" "),n("p",[s._v("问：某个方法进行多次交换，最终的调用顺序是怎样的？")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.staticaly.com/gh/214070779/picx-images-hosting@master/20230813/Screenshot-2023-08-20-at-22.01.21.1gumx22rwvsw.webp",alt:"Screenshot-2023-08-20-at-22"}})]),s._v(" "),n("p",[s._v("补充面试题二")]),s._v(" "),n("p",[s._v("问：如果发现方法交换之后不生效，应该怎么排查？")]),s._v(" "),n("p",[s._v("答：解决的方案有多种，主要从两个方向进行思考")]),s._v(" "),n("p",[s._v("方法交换的class有没有问题")]),s._v(" "),n("p",[s._v("方法交换的method有没有问题")]),s._v(" "),n("p",[s._v("面试题二：")]),s._v(" "),n("p",[s._v("如果是一个同名函数，在load方法内进行方法交换，跟分类中的方法是同名函数，哪么两个同名函数，先调用哪一个。")]),s._v(" "),n("p",[s._v("先调用load方法的，因为load方法在main启动之前就开始调用。")]),s._v(" "),n("p",[s._v("分类方法，是运行时才会被调用")]),s._v(" "),n("p",[s._v("如果是一个同名函数，不在load的方法内进行方法交换，跟分类中的方法是同名函数，哪么两个同名函数，先调用哪一个")]),s._v(" "),n("p",[s._v("先调用方法交换，因为方法交换前先调用此方法。")])])}),[],!1,null,null,null);n.default=t.exports}}]);