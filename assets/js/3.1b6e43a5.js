(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{255:function(e,s,a){"use strict";a.r(s);var t=a(256),n=a.n(t);for(var i in t)["default"].indexOf(i)<0&&function(e){a.d(s,e,(function(){return t[e]}))}(i);s.default=n.a},256:function(e,s){},345:function(e,s,a){"use strict";a.d(s,"a",(function(){return t})),a.d(s,"b",(function(){return n}));var t=function(){var e=this,s=e._self._c;e._self._setupProxy;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"oc与-js交互方式有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oc与-js交互方式有哪些"}},[e._v("#")]),e._v(" OC与 JS交互方式有哪些?")]),e._v(" "),s("ol",[s("li",[e._v("拦截url（适用于UIWebView和WKWebView）")]),e._v(" "),s("li",[e._v("JavaScriptCore（只适用于UIWebView，iOS7+）")]),e._v(" "),s("li",[e._v("WKScriptMessageHandler（只适用于WKWebView，iOS8+）")]),e._v(" "),s("li",[e._v("WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）")])]),e._v(" "),s("h3",{attrs:{id:"通过js调用oc代码-url拦截-一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过js调用oc代码-url拦截-一"}},[e._v("#")]),e._v(" 通过JS调用OC代码(url拦截)一")]),e._v(" "),s("p",[e._v("通过拦截url（适用于UIWebView和WKWebView）")]),e._v(" "),s("ol",[s("li",[e._v("和后端同事协定好协议，如jxaction://scan表示启动二维码扫描，jxaction://location表示获取定位。")]),e._v(" "),s("li",[e._v("实现UIWebView代理的shouldStartLoadWithRequest:navigationType:方法，在方法中对url进行拦截，如果是步奏<1>中定义好的协议则执行对应原生代码，返回false，否则返回true继续加载原url。"),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// js调用原生\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])])]),e._v(" "),s("ul",[s("li",[s("p",[e._v('(BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {\nNSString *url = request.URL.absoluteString;\nif ([url rangeOfString:@"需要跳转源生界面的URL判断"].location != NSNotFound) {')]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("  //跳转原生界面\n  return NO;\n")])])]),s("p",[e._v("}\nreturn YES;\n}")])])]),e._v(" "),s("p",[e._v("h5代码：\n"),s("a",{attrs:{href:"jxaction://scan"}},[e._v("扫一扫(拦截url)")])]),e._v(" "),s("p",[e._v("// 原生调用js：直接调用UIWebView的stringByEvaluatingJavaScriptFromString:方法，或者WKWebView的 evaluateJavaScript:completionHandler:方法。\n若（1）中扫描二维码结束后，需要把扫描结果返回给web页，直接调用UIWebView的stringByEvaluatingJavaScriptFromString:方法，或者WKWebView的 evaluateJavaScript:completionHandler:方法。\n[self.webView stringByEvaluatingJavaScriptFromString:@\"scanResult('我是扫描结果~')\"];")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("### 方法二JavaScriptCore\n\n方法一web调用原生只适合简单的调用，如果要传递参数，虽然也可以拼接在url上，如jxaction://scan?method=aaa，但是需要我们自行对字符串进行分割解析，并且特殊字符需要编码。在iOS7系统提供了JavaScriptCore，可以更优雅地实现js与原生的交互。\n**js调用原生**\n1. 新建类继承自NSObject（如AppJSObject）。\n2. h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。\n3. m文件中实现<2>代理中对应的方法，可以在方法内处理事件或通知代理。\n\nAppJSObject.h\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>")]),e._v(" "),s("p",[e._v("@protocol AppJSObjectDelegate "),s("JSExport")],1),e._v(" "),s("p",[e._v("-(void)scan:(NSString *)message;")]),e._v(" "),s("p",[e._v("@end")]),e._v(" "),s("p",[e._v("@interface AppJSObject : NSObject"),s("AppJSObjectDelegate")],1),e._v(" "),s("p",[e._v("@property(nonatomic,weak) id"),s("AppJSObjectDelegate",[e._v(" delegate;")])],1),e._v(" "),s("p",[e._v("@end")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("AppJSObject.m\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v('#import "AppJSObject.h"')]),e._v(" "),s("p",[e._v("@implementation AppJSObject")]),e._v(" "),s("p",[e._v("-(void)scan:(NSString *)message{\n[self.delegate scan:message];\n}")]),e._v(" "),s("p",[e._v("@end")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("h5代码：\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("input",{attrs:{type:"button",name:"",value:"扫一扫",onclick:"scan()"}}),e._v(" "),s("br"),e._v(" "),s("p",{attrs:{id:"result"}},[e._v("扫描结果：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("4. 在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了。\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v('-(void)webViewDidFinishLoad:(UIWebView *)webView\n{\nJSContext *context=[webView valueForKeyPath:@"documentView.webView.mainFrame.javaScriptContext"];')]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v('AppJSObject *jsObject = [AppJSObject new];\njsObject.delegate = self;\ncontext[@"app"] = jsObject;\n')])])]),s("p",[e._v("}")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("也可以通过block实现而不创建新类AppJSObject:\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v('context[@"openAlbum"] = ^(){\nNSLog(@"js调用oc打开相册");\n};')]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("**原生调用js**\n\n可以通过一中的方法，也可以通过JSContext：\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v('JSContext *context=[_mainWebView valueForKeyPath:@"documentView.webView.mainFrame.javaScriptContext"];\nNSString *alertJS= [NSString stringWithFormat:@"%@(\'%@\')",_photoMethod,fileUrl];\n[context evaluateScript:alertJS];')]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("### 方法三. WKScriptMessageHandler\n\n现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler\n1. 初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan:\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("ul",[s("li",[s("p",[e._v('(void)setupWKWebView{\nWKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\nconfiguration.userContentController = [[WKUserContentController alloc] init];\n[configuration.userContentController addScriptMessageHandler:self name:@"scan"];')]),e._v(" "),s("p",[e._v("WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];\nwebView.UIDelegate = self;\n}")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("h5:\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("window.webkit.messageHandlers.scan.postMessage()")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])])]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message{\n    if ([message.name isEqualToString:@"scan"]) {\n        //调用原生扫码\n     }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h3",{attrs:{id:"方法四-webviewjavascriptbridge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法四-webviewjavascriptbridge"}},[e._v("#")]),e._v(" 方法四 WebViewJavascriptBridge")]),e._v(" "),s("p",[e._v("是一个第三方框架，官方文档和demo都很完整，不再累赘，GitHub地址：\n"),s("a",{attrs:{href:"https://github.com/marcuswestin/WebViewJavascriptBridge",target:"_blank",rel:"noopener noreferrer"}},[e._v("WebViewJavascriptBridge"),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"wkwebview-白屏问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wkwebview-白屏问题"}},[e._v("#")]),e._v(" WKWebView 白屏问题")]),e._v(" "),s("p",[e._v("WKWebView是一个多进程的组件，Network Loading以及UI Rendering在其他进程中执行。初次适配WKWebView的时候，我们也惊讶于打开WKWebView后， App进程内存消耗反而大幅度下降，但仔细观察会发现，Other Process的内存占用会增加。在一些用webGL渲染的复杂页面，使用WKWebView总体的内存占用【App process Memory + other Process Memory】，不见得比UIWebView少很多。")]),e._v(" "),s("p",[e._v("UIWebView上当内存占用太大的时候， App Process会crash；而在WKWebView上当总体的内存占用比较大的时候，WebContent Process会crash， 从而出现白屏现象")]),e._v(" "),s("p",[e._v("这个时候WKWebView.URL会变成nil，简单的reload刷新操作已经失效，对于一些长驻的H5页面影响比较大。")]),e._v(" "),s("h3",{attrs:{id:"解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[e._v("#")]),e._v(" 解决方案")]),e._v(" "),s("ol",[s("li",[e._v("借助WKNavigationDelegate\niOS9之后增加的回调函数"),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/*! @abstract Invoked when the web view's web content process is terminated.\n@param webView The web view whose underlying web content process was terminated.\n*/\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])])])]),e._v(" "),s("ul",[s("li",[s("p",[e._v("(void)webViewWebContentProcessDidTerminate:(WKWebView *)webView API_AVAILABLE(macos(10.11), ios(9.0));")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])])]),e._v(" "),s("p",[e._v("在WKWebView总体内存占用过大的时候，页面即将出现白屏，在上面这个系统回调方法中执行[webview reload]来解决白屏问题。")]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("检测webView.title是否为空")])]),e._v(" "),s("p",[e._v("并不是所有的H5页面白屏的时候都会调用上面的回调函数； 场景：最近遇到的一个高内存消耗的H5页面上present系统相机，拍照完毕后返回原来页面的时候出现白屏现象（拍照过程消耗了大量内存，导致内存紧张， WebContent Process被系统挂起），但上面的回调函数并没有被调用。在WKWebView白屏的时候，另一种现象是webView.title会被置空，因此，可以在viewWillAppear的时候检测webView.title是否为空来reload页面。")]),e._v(" "),s("h2",{attrs:{id:"wkwebview-cookie问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wkwebview-cookie问题"}},[e._v("#")]),e._v(" WKWebView Cookie问题")]),e._v(" "),s("h3",{attrs:{id:"wkwebview-cookie存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wkwebview-cookie存储"}},[e._v("#")]),e._v(" WKWebView Cookie存储")]),e._v(" "),s("p",[e._v("业界普遍认为 WKWebView 拥有自己的私有存储，不会将 Cookie 存入到标准的 Cookie 容器 NSHTTPCookieStorage 中。")]),e._v(" "),s("p",[e._v("实践发现 WKWebView 实例其实也会将 Cookie 存储于 NSHTTPCookieStorage 中，但存储时机有延迟，在iOS 8上，当页面跳转的时候，当前页面的 Cookie 会写入 NSHTTPCookieStorage 中，而在 iOS 10 上，JS 执行 document.cookie 或服务器 set-cookie 注入的 Cookie 会很快同步到 NSHTTPCookieStorage 中，FireFox 工程师曾建议通过 reset WKProcessPool 来触发 Cookie 同步到 NSHTTPCookieStorage 中，实践发现不起作用，并可能会引发当前页面 session cookie 丢失等问题。")]),e._v(" "),s("p",[s("strong",[e._v("WKWebView Cookie 问题在于 WKWebView 发起的请求不会自动带上存储于 NSHTTPCookieStorage 容器中的 Cookie。")])]),e._v(" "),s("p",[e._v("比如，NSHTTPCookieStorage 中存储了一个 Cookie:")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),s("p",[e._v("name=Nicholas;value=test;domain=y.qq.com;expires=Sat, 02 May 2019 23:38:25 GMT；")])]),e._v(" "),s("p",[e._v("通过 UIWebView 发起请求http://y.qq.com， 则请求头会自动带上 cookie: Nicholas=test； 而通过 WKWebView发起请求http://y.qq.com， 请求头不会自动带上 cookie: Nicholas=test。")]),e._v(" "),s("h3",{attrs:{id:"wkprocesspool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wkprocesspool"}},[e._v("#")]),e._v(" WKProcessPool")]),e._v(" "),s("ul",[s("li",[e._v("WKProcessPool定义：A WKProcessPool object represents a pool of Web Content process。")])]),e._v(" "),s("p",[e._v("通过让所有 WKWebView 共享同一个 WKProcessPool 实例，可以实现多个 WKWebView 之间共享 Cookie（session Cookie and persistent Cookie）数据。 不过WKWebView WkProcessPool实例在app杀进程重启后会被重置，导致WKProcessPool 中的cookie/session Cookie数据丢失，目前也无法实现WKProcessPool实例本地化保存。")]),e._v(" "),s("h3",{attrs:{id:"workround"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#workround"}},[e._v("#")]),e._v(" Workround")]),e._v(" "),s("p",[e._v("H5的业务都是依赖于Cookie作登陆态校验，而WKWebView上请求不会自动携带Cookie，目前的主要解决方案是：")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("WKWebView loadRequest前，在request header中设置Cookie，解决首个请求Cookie带不上的问题")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('WKWebView * webView = [WKWebView new]; \nNSMutableURLRequest * request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://h5.qzone.qq.com/mqzone/index"]]; \n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])])])]),e._v(" "),s("p",[e._v('[request addValue:@"skey=skeyValue" forHTTPHeaderField:@"Cookie"];\n[webView loadRequest:request];')]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("2. 通过document.cookie设置Cookie解决后续页面（同域）Ajax， iframe 请求的cookie问题 注意：document.cookie() 无法跨域设置cookie\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("WKUserContentController* userContentController = [WKUserContentController new];\nWKUserScript * cookieScript = [[WKUserScript alloc] initWithSource: @\"document.cookie = 'skey=skeyValue';\" injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:NO];")]),e._v(" "),s("p",[e._v("[userContentController addUserScript:cookieScript];")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("这种方案无法解决302请求的Cookie问题，比如：第一个请求时www.a.com,我们通过在request header里带上Cookie解决该请求的Cookie问题，接着页面302跳转到www.b.com, 这个时候www.b.com 这个请求就可能因为没有携带cookie而无法访问。当然，由于每一次页面跳转都会调用回调函数：\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("ul",[s("li",[s("p",[e._v("(void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler;")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])])])]),e._v(" "),s("p",[e._v("可以在该回调函数里拦截302请求，copy request， 在request header中带上cookie并重新loadRequest。不过这种方法依然解决不了页面的iframe跨域请求的cookie问题，毕竟-[WKWebView loadRequest]只适合加载mainiFrame请求。")]),e._v(" "),s("h3",{attrs:{id:"wkwebview-nsurlprotocol-问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wkwebview-nsurlprotocol-问题"}},[e._v("#")]),e._v(" WKWebView NSURLProtocol 问题")]),e._v(" "),s("p",[e._v("WKWebView在独立于App进程之外的进程中执行网络请求，请求数据不经过主进程，因此，在WKWebView上直接使用NSURLProcol无法拦截请求。")]),e._v(" "),s("p",[e._v("苹果开源的WebKit源码暴露了私有API")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("+ [WKBrowsingContextController registerSchemeForCustomProtocol:]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("通过注册http(s) scheme 后， WKWebView将可以使用NSURLProtocol拦截http(s)请求：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('Class cls = NSClassFromString(@"WKBrowsingContextController”); \nSEL sel = NSSelectorFromString(@"registerSchemeForCustomProtocol:"); \nif ([(id)cls respondsToSelector:sel]) { \n           // 注册http(s) scheme, 把 http和https请求交给 NSURLProtocol处理 \n           [(id)cls performSelector:sel withObject:@"http"]; \n           [(id)cls performSelector:sel withObject:@"https"]; \n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("h4",{attrs:{id:"缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[e._v("#")]),e._v(" 缺点")]),e._v(" "),s("ol",[s("li",[e._v("post请求body数据被清空 由于WKWebView在独立进程里网络请求。一旦注册http(s) scheme后，网络请求将从Network process发送到App Process，这样NSURLProtocol才能拦截网络请求。 在webkit2的设计里使用了messageQueue进行进程之间的通信， Network Process会将请求encode成一个Message，然后通过IPC发送给App Process。 出于性能的原因，encode的时候HTTPBody和HTTPBodyStream这两个字段丢弃掉了。")])]),e._v(" "),s("p",[e._v("因此，如果通过registerSchemeForCustomProcol注册了http(s) scheme，那么由WKWebView发起的所有http(s)请求都会通过IPC传给进程NSURLProtocol处理，导致post请求body被清空；")]),e._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[e._v("对ATS支持不足 打开ATS开关： Allow Arbitrary Loads选项设置为NO，同时通过registerSchemeForCustomProtocol注册了http(s) scheme；WKWebView发起的所有http网络请求将被阻塞(即便将Allow Arbitrary Loads in Web Content 选项设置为YES) WKWebView可以注册customScheme，比如dynamic://，因此希望使用离线功能，又不使用post方式的请求可以通过customScheme发起请求，eg：dynamic://www.dynamicalbumlocalimage.com/，然后在 app 进程 NSURLProtocol 拦截这个请求并加载离线数据。不足： 使用post方式的请求该方案依然不适用，同时需要H5侧修改请求scheme以及CSP规则。")])]),e._v(" "),s("h2",{attrs:{id:"wkwebview-loadrequest问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wkwebview-loadrequest问题"}},[e._v("#")]),e._v(" WKWebView loadRequest问题")]),e._v(" "),s("p",[e._v("在WKWebView上通过loadRequest发起的post请求body数据会丢失；")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('//同样是由于进程间通信性能问题，HTTPBody字段被丢弃\n[request setHTTPMethod:@"POST"];\n[request setHTTPBody:[@"bodyData" dataUsingEncoding:NSUTF8StringEncoding]];\n[wkwebview loadRequest: request];\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("workround: 假设想通过-[WKWebView loadRequest:]加载post请求，request1： http://h5.qzone.qq.com/mqzone/index，可以通过以下步骤实现：")]),e._v(" "),s("ol",[s("li",[e._v("替换请求scheme，生成新的post请求request2：post://h5.qzone.qq.com/mqzone/index，同时将request1的body字段复制到request2的header中（WebKit不会丢弃header字段）")]),e._v(" "),s("li",[e._v("通过-[WKWebView loadRequest:]加载新的post请求request2；")]),e._v(" "),s("li",[e._v("通过 +[WKbrowsingContextController registerSchemeForCustom Protocol：]注册scheme:post://;")]),e._v(" "),s("li",[e._v("注册 NSURLProtocol 拦截请求post://h5.qzone.qq.com/mqzone/index ,替换请求 scheme, 生成新的请求 request3: http://h5.qzone.qq.com/mqzone/index，将 request2 header的body 字段复制到 request3 的 body 中，并使用 NSURLConnection 加载 request3，最后通过 NSURLProtocolClient 将加载结果返回 WKWebView;")])]),e._v(" "),s("h2",{attrs:{id:"wkwebview页面样式问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wkwebview页面样式问题"}},[e._v("#")]),e._v(" WKWebView页面样式问题")]),e._v(" "),s("p",[e._v("适配过程中，发现h5页面元素位置向下偏移或被拉伸变形，追踪后发现主要是h5页面高度值异常导致：")]),e._v(" "),s("p",[s("strong",[e._v("问题1:")])]),e._v(" "),s("p",[e._v("空间H5页面有透明导航、透明导航下拉刷新、全屏等需求，因此之前 webView 整个是从（0, 0）开始布局，通过调整webView.scrollView.contentInset 来适配特殊导航栏需求。而在 WKWebView 上对 contentInset 的调整会反馈到webView.scrollView.contentSize.height的变化上，比如设置 webView.scrollView.contentInset.top = a，那么contentSize.height的值会增加a,导致H5页面长度增加，页面元素位置向下偏移；")]),e._v(" "),s("p",[s("strong",[e._v("解决方案:")])]),e._v(" "),s("p",[e._v("调整WKWebView布局方式，避免调整webView.scrollView.contentInset。实际上，即便在 UIWebView 上也不建议直接调整webView.scrollView.contentInset的值，这确实会带来一些奇怪的问题。如果某些特殊情况下非得调整 contentInset 不可的话，可以通过下面方式让H5页面恢复正常显示：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/**设置contentInset值后通过调整webView.frame让页面恢复正常显示 \n *参考：http://km.oa.com/articles/show/277372\n */ \nwebView.scrollView.contentInset = UIEdgeInsetsMake(a, 0, 0, 0); \nwebView.frame = CGRectMake(webView.frame.origin.x, webView.frame.origin.y, webView.frame.size.width, webView.frame.size.height - a);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[s("strong",[e._v("问题2:接入now直播问题")])]),e._v(" "),s("p",[e._v("在接入 now 直播的时候，我们发现在 iOS 9 上 WKWebView 会出现页面被拉伸变形的情况，最后发现是window.innerHeight值不准确导致（在WKWebView上返回了一个非常大的值），而H5同学通过获取window.innerHeight来设置页面高度，导致页面整体被拉伸。通过查阅相关资料发现，这个bug只在 iOS 9 的几个系统版本上出现，苹果后来fix了这个bug。我们最后的解决方案是：延迟调用window.innerHeight。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('setTimeout(function(){height = window.innerHeight},0);\n或者\nUse shrink-to-fit meta-tag \n<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1, shrink-to-fit=no">\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h2",{attrs:{id:"wkwebview截屏问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wkwebview截屏问题"}},[e._v("#")]),e._v(" WKWebView截屏问题")]),e._v(" "),s("p",[e._v("空间玩吧H5小游戏有截屏分享的功能，WKWebView 下通过 -[CALayer renderInContext:]实现截屏的方式失效，需要通过以下方式实现截屏功能：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("@implementation UIView (ImageSnapshot) \n- (UIImage*)imageSnapshot { \n    UIGraphicsBeginImageContextWithOptions(self.bounds.size,YES,self.contentScaleFactor); \n    [self drawViewHierarchyInRect:self.bounds afterScreenUpdates:YES]; \n    UIImage* newImage = UIGraphicsGetImageFromCurrentImageContext(); \n    UIGraphicsEndImageContext(); \n    return newImage; \n} \n@end\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("然而这种方式依然解决不了 webGL 页面的截屏问题，笔者已经翻遍苹果文档，研究过 webKit2 源码里的截屏私有API，依然没有找到合适的解决方案，同时发现 Safari 以及 Chrome 这两个全量切换到 WKWebView 的浏览器也存在同样的问题：对webGL 页面的截屏结果不是空白就是纯黑图片。无奈之下，我们只能约定一个JS接口，让游戏开发商实现该接口，具体是通过 canvas getImageData()方法取得图片数据后返回 base64 格式的数据，客户端在需要截图的时候，调用这个JS接口获取 base64 String 并转换成 UIImage。")]),e._v(" "),s("h2",{attrs:{id:"wkwebview-crash问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wkwebview-crash问题"}},[e._v("#")]),e._v(" WKWebView crash问题")]),e._v(" "),s("p",[e._v("WKWebView 放量后，外网新增了一些 crash, 其中一类 crash 的主要堆栈如下：")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("注意")]),e._v(" "),s("p",[e._v("...\n28 UIKit 0x0000000190513360 UIApplicationMain + 208\n29 Qzone 0x0000000101380570 main (main.m:181)\n30 libdyld.dylib 0x00000001895205b8 _dyld_process_info_notify_release + 36\nCompletion handler passed to -[QZWebController webView:runJavaScriptAlertPanelWithMessage:initiatedByFrame:completionHandler:] was not called")])]),e._v(" "),s("p",[e._v("主要是JS调用window.alert()函数引起的，从 crash 堆栈可以看出是 WKWebView 回调函数:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("+ (void) presentAlertOnController:(nonnull UIViewController*)parentController title:(nullable NSString*)title message:(nullable NSString *)message handler:(nonnull void (^)())completionHandler;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("completionHandler 没有被调用导致的。在适配 WKWebView 的时候，我们需要自己实现该回调函数，window.alert()才能调起 alert 框，我们最初的实现是这样的：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('- (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler \n{ \n    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"" message:message preferredStyle:UIAlertControllerStyleAlert]; \n    [alertController addAction:[UIAlertAction actionWithTitle:@"确认" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) { completionHandler(); }]]; \n    [self presentViewController:alertController animated:YES completion:^{}]; \n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("如果 WKWebView 退出的时候，JS刚好执行了window.alert(), alert 框可能弹不出来，completionHandler 最后没有被执行，导致 crash；另一种情况是在 WKWebView 一打开，JS就执行window.alert()，这个时候由于 WKWebView 所在的 UIViewController 出现（push或present）的动画尚未结束，alert 框可能弹不出来，completionHandler 最后没有被执行，导致 crash。我们最终的实现大致是这样的：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('- (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler \n{ \n    if (/*UIViewController of WKWebView has finish push or present animation*/) { \n        completionHandler(); \n        return; \n    } \n    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"" message:message preferredStyle:UIAlertControllerStyleAlert]; \n    [alertController addAction:[UIAlertAction actionWithTitle:@"确认" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) { completionHandler(); }]]; \n    if (/*UIViewController of WKWebView is visible*/) \n        [self presentViewController:alertController animated:YES completion:^{}]; \n    else \n        completionHandler(); \n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("确保上面两种情况下 completionHandler 都能被执行，消除了 WKWebView 下弹 alert 框的 crash，WKWebView 下弹 confirm 框的 crash 的原因与解决方式与 alert 类似。")]),e._v(" "),s("p",[e._v("另一个 crash 发生在 WKWebView 退出前调用：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("-[WKWebView evaluateJavaScript: completionHandler:]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("执行JS代码的情况下。WKWebView 退出并被释放后导致completionHandler变成野指针，而此时 javaScript Core 还在执行JS代码，待 javaScript Core 执行完毕后会调用completionHandler()，导致 crash。这个 crash 只发生在 iOS 8 系统上，参考Apple Open Source，在iOS9及以后系统苹果已经修复了这个bug，主要是对completionHandler block做了copy（refer: https://trac.webkit.org/changeset/179160）；对于iOS 8系统，可以通过在 completionHandler 里 retain WKWebView 防止 completionHandler 被过早释放。我们最后用 methodSwizzle hook 了这个系统方法：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('+ (void) load \n{ \n     [self jr_swizzleMethod:NSSelectorFromString(@"evaluateJavaScript:completionHandler:") withMethod:@selector(altEvaluateJavaScript:completionHandler:) error:nil]; \n} \n/* \n * fix: WKWebView crashes on deallocation if it has pending JavaScript evaluation \n */ \n- (void)altEvaluateJavaScript:(NSString *)javaScriptString completionHandler:(void (^)(id, NSError *))completionHandler \n{ \n    id strongSelf = self; \n    [self altEvaluateJavaScript:javaScriptString completionHandler:^(id r, NSError *e) { \n        [strongSelf title]; \n        if (completionHandler) { \n            completionHandler(r, e); \n        } \n    }]; \n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("h2",{attrs:{id:"其它问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它问题"}},[e._v("#")]),e._v(" 其它问题")]),e._v(" "),s("p",[s("strong",[e._v("问题1")])]),e._v(" "),s("p",[e._v("视频自动播放 WKWebView 需要通过WKWebViewConfiguration.mediaPlaybackRequiresUserAction设置是否允许自动播放，但一定要在 WKWebView 初始化之前设置，在 WKWebView 初始化之后设置无效。")]),e._v(" "),s("p",[s("strong",[e._v("问题2")]),e._v("\ngoBack API问题 WKWebView 上调用 -[WKWebView goBack], 回退到上一个页面后不会触发window.onload()函数、不会执行JS。")]),e._v(" "),s("p",[s("strong",[e._v("问题3")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView {\n     scrollView.decelerationRate = UIScrollViewDecelerationRateNormal;\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[s("strong",[e._v("登录后cookie携带不上问题")]),e._v("\n现象：未登录访问h5页面，点击按钮弹出登录页，登录成功后再次点击按钮，又弹出登录页，抓包cookie为空\n原因：登录后登录状态写进cookie里了，并保存在NSHTTPCookieStorage里，但是没有同步到WKHTTPCookieStore里，所以h5获取不到cookie\n解决，登录后重新加载 loadRequest")]),e._v(" "),s("p",[s("strong",[e._v("Cookie异常丢失")])]),e._v(" "),s("p",[e._v("由于WKWebView加载网页得到的Cookie会同步到NSHTTPCookieStorage中的特点，有时候你强行添加的Cookie会在同步过程中丢失。抓包你就会发现，点击一个链接时，Request的header中多了Set-Cookie字段，其实Cookie已经丢了")]),e._v(" "),s("p",[e._v("解决：把自己需要的Cookie主动保存起来，每次调用[NSHTTPCookieStorage sharedHTTPCookieStorage].cookies方法时，保证返回的数组中有自己需要的Cookie，用了runtime的Method Swizzling，代码如下：")]),e._v(" "),s("p",[e._v("适当的时候保存cookie")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('//比如登录成功，保存Cookie\nNSArray *allCookies = [[NSHTTPCookieStorage sharedHTTPCookieStorage] cookies];\nfor (NSHTTPCookie *cookie in allCookies) {\n    if ([cookie.name isEqualToString:DAServerSessionCookieName]) {\n        NSDictionary *dict = [[NSUserDefaults standardUserDefaults] dictionaryForKey:DAUserDefaultsCookieStorageKey];\n        if (dict) {\n            NSHTTPCookie *localCookie = [NSHTTPCookie cookieWithProperties:dict];\n            if (![cookie.value isEqual:localCookie.value]) {\n                NSLog(@"本地Cookie有更新");\n            }\n        }\n        [[NSUserDefaults standardUserDefaults] setObject:cookie.properties forKey:DAUserDefaultsCookieStorageKey];\n        [[NSUserDefaults standardUserDefaults] synchronize];\n        break;\n    }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("p",[e._v("读取时如果cookie为空则添加")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("@implementation NSHTTPCookieStorage (Utils)\n\n+ (void)load\n{\n    class_methodSwizzling(self, @selector(cookies), @selector(da_cookies));\n}\n\n- (NSArray<NSHTTPCookie *> *)da_cookies\n{\n    NSArray *cookies = [self da_cookies];\n    BOOL isExist = NO;\n    for (NSHTTPCookie *cookie in cookies) {\n        if ([cookie.name isEqualToString:DAServerSessionCookieName]) {\n            isExist = YES;\n            break;\n        }\n    }\n    if (!isExist) {\n        //CookieStroage中添加\n        NSDictionary *dict = [[NSUserDefaults standardUserDefaults] dictionaryForKey:DAUserDefaultsCookieStorageKey];\n        if (dict) {\n            NSHTTPCookie *cookie = [NSHTTPCookie cookieWithProperties:dict];\n            [[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookie:cookie];\n            NSMutableArray *mCookies = cookies.mutableCopy;\n            [mCookies addObject:cookie];\n            cookies = mCookies.copy;\n        }\n    }\n    return cookies;\n}\n\n@end\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br")])])])},n=[]},346:function(e,s,a){"use strict";a.r(s);var t=a(345),n=a(255);for(var i in n)["default"].indexOf(i)<0&&function(e){a.d(s,e,(function(){return n[e]}))}(i);var r=a(4),l=Object(r.a)(n.default,t.a,t.b,!1,null,null,null);s.default=l.exports}}]);